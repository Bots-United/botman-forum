--------------------------------------------------
Subject: Information on BSP Format
--------------------------------------------------
12/31/01 at 23:30:30  Posted by: Zipster (skyork99@juno.com)
--------------------------------------------------
I'm wondering where I could find a nice document that explains the way the Quake1/Half-Life BSP works;  I've been examining the ZHLT source and have been getting a good idea of some aspects of the design, but I need some larger overview of how everything is put together (and what all those different lumps do!).  The source code is nice, but I'm looking for a document that would explain what's going on so the source code makes more sense.

--------------------------------------------------
01/01/02 at 04:44:04  Reply by: ReDucTor[FGW] (sjdtmv@tpg.com.au)
--------------------------------------------------
Well right at the top of the BSP file there is the dheader_t struct..it looks like this

code:

#define      HEADER_LUMPS      15

typedef struct
{
      int                  version;      
      lump_t            lumps[HEADER_LUMPS];
} dheader_t;



Then there are your lumps

code:

#define      LUMP_ENTITIES      0
#define      LUMP_PLANES            1
#define      LUMP_TEXTURES      2
#define      LUMP_VERTEXES      3
#define      LUMP_VISIBILITY      4
#define      LUMP_NODES            5
#define      LUMP_TEXINFO      6
#define      LUMP_FACES            7
#define      LUMP_LIGHTING      8
#define      LUMP_CLIPNODES      9
#define      LUMP_LEAFS            10
#define      LUMP_MARKSURFACES 11
#define      LUMP_EDGES            12
#define      LUMP_SURFEDGES      13
#define      LUMP_MODELS            14



Now for each lump you get the offset, and length of the lump in the lump_t struct

code:

typedef struct
{
      int            fileofs, filelen;
} lump_t;



Now you need to know what each lump's format is, i won't show the structure its self, just the name you can go find the structure your self(see the HLSDK if your lost)

code:

LUMP_ENTITIES - This is in ASCII, it contains all the entities epairs,
                including origin and other not really epairs,
                epairs..I suggest using cmdlib/scriplib for processing this
LUMP_PLANES - For each plane theres a dplane_t struct..
LUMP_TEXTURES - The texture data is stored in a dmiptexlump_t struct
LUMP_VERTEXES - For each Vertex theres a dvertex_t structure
LUMP_VISIBILITY - This is compressed Visibilty data
LUMP_NODES - for each node there is dnode_t structure
LUMP_TEXINFO - for each texinfo theres a texinfo_t struct
LUMP_FACES - for each face there is a dface_t struct
LUMP_LIGHTING - This contains the lighting data...
LUMP_CLIPNODES - for each clip node, there is a dclipnode_t structure
LUMP_LEAFS - for each leaf there is a dleaf_t structure
LUMP_MARKSURFACES - for each marked face there is an unsigned short
LUMP_EDGES - for each edge there is a dedge_t structure
LUMP_SURFEDGES - for each surface edge there is an interger
LUMP_MODELS - for each model there is a dmodel_t structure



Hope that makes it easier to understand...

Here is an example to dump say all the entities

code:

dheader_t *hdr;
char *entities
FILE *fp = fopen("map.bsp", "r");
fread((dheader_t)hdr, 1, sizeof(dheader_t), fp);
fseek(fp, hdr->lumps[LUMP_ENTITIES].fileofs, SEEK_SET);
fread(entities, 1, hdr->lumps[LUMP_ENTITIES].filelen);
fclose(fp);
printf(entities);



Thats all untested :)

[modified on 01/01/02 at 04:44:04]
--------------------------------------------------
01/01/02 at 03:23:08  Reply by: Zipster (skyork99@juno.com)
--------------------------------------------------
Thanks, I understand all that, but I'm trying to find some more detailed documentation.  For example, I understand the concept of leafs and nodes, but I'm trying to understand what they are in terms of the Half-Life BSP and how they are created;  what algorithms are used, etc.

It's hard for me to describe exactly what I need, but my closest stab is this:  a description of all the variables in all the data structures telling me what they are, what data they store, and how they relate to the function of the BSP.  I'm very good at coding, but very bad at 3D engines and related topics :)  oh except math, I'm good at that :P

--------------------------------------------------
01/01/02 at 04:40:47  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
See this thread...

http://dynamic.gamespy.com/~wavelength/ubb/Forum3/HTML/007994.html

botman

--------------------------------------------------
01/01/02 at 12:20:57  Reply by: Zipster (skyork99@juno.com)
--------------------------------------------------
Thanks botman.  Come to think of it, I believe I remember that post :)

--------------------------------------------------
01/03/02 at 04:03:54  Reply by: William (william@cgf-ai.com)
--------------------------------------------------
Skyler,

to bridge the 3D programming gap, I suggest visiting flipcode.com. In particular:
http://www.flipcode.com/portal/

William

