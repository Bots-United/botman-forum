--------------------------------------------------
Subject: enum
--------------------------------------------------
06/10/03 at 01:54:59  Posted by: corbin_mike (corbin_mike@hotmail.com)
--------------------------------------------------
Can someone explain enums ?

Maybe if I knew exactly what an enum is used for then I can solve my problem. I use this same line of code in 2 different header files for 2 different gamemodes and when the compiler hits gamerules it gives me the error.

code :

enum 
{
RESULT_LOSS,
}

And the compiler gives me this--->

gamerules.cpp
C:\SIERRA\Half-Life\SDK\Multiplayer Source\dme\dlls\dme_mode_team_arena.h(22) : error C2371: 'RESULT_LOSS' : redefinition; different basic types
        C:\SIERRA\Half-Life\SDK\Multiplayer Source\dme\dlls\dme_mode_duel_arena.h(21) : see declaration of 'RESULT_LOSS'

Thanks Very Much


--------------------------------------------------
06/10/03 at 02:05:29  Reply by: corbin_mike (corbin_mike@hotmail.com)
--------------------------------------------------
I fixed the problem (set it as protected)

But I would still like to know about enums :)

Thanks

--------------------------------------------------
06/10/03 at 03:21:11  Reply by: Cheesemonster!!! (paul.murphy@ntlworld.com)
--------------------------------------------------
With enum, you can automatically define constants with different values, starting at whatever you want, but it is typical zero if you do not define is as zero.

i.e.

enum eMyEnum
{
  THIS_IS_AUTOMATICALLY_ZERO
}

Will create a constant called "THIS_IS_AUTOMATICALLY_ZERO" and its value will be zero. IF you create other contanst after it, their values will come imediately after the one defined before it i.e.

enum eMyEnum
{
THIS_IS_AUOTMATICALLY_ZERO,
THIS_IS_AUTOMATICALLY_ONE
}

THIS_IS_AUOTMATICALLY_ZERO will have value 0.
THIS_IS_AUTOMATICALLY_ONE will have value 1.

Yuo can make the enum start at a different value than 0, for example, heres one that starts at -1.

enum eMyEnum
{ 
THIS_IS_NEGATIVE_ONE = -1,
THIS_IS_AUTOMATICALLY_ZERO,
THIS_IS_AUTOMATICALLY_ONE
}

This also means you can change the values inside your enum, without the need of the compiler automatically giving them a value, you can define it if you want or let it be automatic i.e.


enum eMyEnum
{ 
THIS_IS_NEGATIVE_ONE = -1,
THIS_IS_AUTOMATICALLY_ZERO,
THIS_IS_AUTOMATICALLY_ONE,
IVE_MADE_THIS_FIVE = 5,
THIS_IS_AUTOMATICALLY_SIX,
IVE_MADE_THIS_TEN = 10
}

THIS_IS_NEGATIVE_ONE = -1
THIS_IS_AUTOMATICALLY_ZERO = 0
THIS_IS_AUTOMATICALLY_ONE = 1
IVE_MADE_THIS_FIVE = 5
THIS_IS_AUTOMATICALLY_SIX = 6
IVE_MADE_THIS_TEN = 10

etc...

You can use your enum definition like this:


eMyEnum WhatINeedMyEnumFor;

WhatINeedMyEnumFor = THIS_IS_AUTOMATICALLY_ZERO;

etc...

you can use switch to determine what it is, I recommend using it instead of if's.

switch (WhatINeedMyEnumFor)
{
case THIS_IS_AUTOMATICALLY_ZERO:
// do something
break;
case IVE_MADE_THIS_FIVE:
//do something else
break;
}

[modified on 06/10/03 at 03:21:11]
--------------------------------------------------
06/10/03 at 16:13:47  Reply by: corbin_mike (corbin_mike@hotmail.com)
--------------------------------------------------
Thanks you very much for the thorough reply

