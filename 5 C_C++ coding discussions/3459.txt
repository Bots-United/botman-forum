--------------------------------------------------
Subject: Stacks
--------------------------------------------------
07/21/02 at 07:50:52  Posted by: mattkimbo (mattkimbo@yahoo.co.uk)
--------------------------------------------------
Could some one please explain FIFO (First in, first out) and LIFO (Last in first out) and stack to me? This is making waypointing a living hell!


--------------------------------------------------
07/21/02 at 08:49:13  Reply by: @$3.1415rin (joebot@botepidemic.com)
--------------------------------------------------
could you be a bit more specific ? what don't you understand ?

FIFO, yes right, you'll get the element first, which you have put in there first.

LIFO, last in first out, well that's the system how my desk here works, the last book I put on top of it, has to be the first one I have to take back ... that's also called stack.

All these structures are normally realized by linked list or sometimes by dynamic arrays. FIFO would be a list where you always insert an item at the front and get items from the back, LIFO, when you insert the items at the front and get items also from the front.

--------------------------------------------------
07/21/02 at 11:04:47  Reply by: Cheesemonster!!! (paul.murphy@ntlworld.com)
--------------------------------------------------
a stack is a last in, first out structure. Think of a stack as a stack of plates. You put a new one on top, and when you want another plate, you have to take the top one from the stack.

code:

  Top
   -
   -
   -
 Bottom



A Queue is an example of a first in first out structure. Again, you can think of a queue as a queue that you can wait in, the first one that goes in is the first one out (First come first serve type!)

code:

Last | - | - | - | - First



I'll give you some details on a stack below since they are the easiest to explain. You can set-up a simple stack like this.

code:

typedef struct node
{
  int number;
  struct node *next;
}NODE;



for a stack...

code:

typedef struct
{
  NODE *top;
}STACK;

STACK *stack;

//on initialise :

stack->top = NULL;

//to search through the stack and print its number:

NODE *temp = stack->top;

while ( temp )
{
  printf("Number of this node is : %d\n",temp->number); // Print detail of this node
  temp = temp->next;
}

//to delete from a stack (you can only remove the top of the stack)

NODE *temp = stack->top;
stack->top = stack->top->next;
free(temp); // Free the deleted node from memory

//To add to the stack:

NODE *newnode = (NODE*)malloc(sizeof(NODE));

printf("Enter number of this node: ");
scanf("%d",&newnode->number);

NODE *temp = stack->top;
stack->top = newnode;
newnode->next = stack->top;




--------------------------------------------------
07/21/02 at 12:42:51  Reply by: mattkimbo (mattkimbo@yahoo.co.uk)
--------------------------------------------------
Thanks allot! that helped :) cheers guys!

--------------------------------------------------
07/28/02 at 01:41:32  Reply by: Zipster (skyork99@juno.com)
--------------------------------------------------
Do yourself a favor and use std::queue and std::deque for stacks.  It saves on reinventing the wheel.  Then again, it's always good learning practice to do things from scratch.

--------------------------------------------------
07/28/02 at 04:55:09  Reply by: Cheesemonster!!! (paul.murphy@ntlworld.com)
--------------------------------------------------
I prefer to use my own since I already know how mine works and it works just as good :)

--------------------------------------------------
08/15/02 at 01:11:37  Reply by: Zipster (skyork99@juno.com)
--------------------------------------------------
std stacks and queues are insanely easy, and fast for that matter.  Have you benchmarked both your version and the std version?  Because std is pretty damn fast too.

