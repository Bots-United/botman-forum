--------------------------------------------------
Subject: Input stream manipulation
--------------------------------------------------
02/21/03 at 22:07:00  Posted by: Zipster (skyork99@juno.com)
--------------------------------------------------
I've posted this question all over the place, but no one could give me an answer.  Literally :)  So I decided to try my luck here at botman's humble forums!

What I want to do sounds simple, but I haven't been able to find a solution.  I want to manually insert data into the input buffer as a way of "emulating" keyboard input.  This "feature" is really an afterthought in the design sense, so I'm not that flexible with solutions.  Specifically, I can't create my own abstraction layer, I have to work with the standard input stream cin directly at this point.

I know that cin is buffered, and that the basic_istream knows the location of this buffer directly (as in it's stored within a member variable as well as in the FILE structure), but I'm really not up to creating my own derived interface for accessing this buffer and then writing manually to it.  Empirical evidence indicates that this buffer is usually 4096 bytes, yet I don't want to assume this, and this value isn't stored someone where I can get easy access to it.  Additionally, I don't want to have to write data manually to the buffer if I don't need to.  My professor will go bonkers if he sees my code doing something like that :)

So is there an elegent way (read: existing interface and functions) to go "backwards" with an input stream, i.e insertion?  The most successful functions I've used were cin.unget() and cin.rdbuf()->putbackc(), however they have strict limitations on what they can put back and how much they can put back.

[modified on 02/21/03 at 22:07:00]
--------------------------------------------------
02/22/03 at 07:15:18  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
I would overload the cin input stream and create my own function that gets called by all input routines in an application.  That way you can insert characters into the stream from some other buffer and when the other buffer is empty, then allow characters from the operating system input stream to be sent.

See any good C++ book that talks about I/O streams and I'm sure they'll have examples of overloading the cin or cout streams.

botman

--------------------------------------------------
02/22/03 at 15:59:02  Reply by: Zipster (skyork99@juno.com)
--------------------------------------------------
Right, that's like the abstraction interface I was talking about.  Right now I'm kinda between a rock and a hard place, I have to add this system without changing existing code :)  I've considered overloading the stream but I'll have to do some research into what I'll really have to do.

Thanks for the reply, at least I'm not alone here :)

