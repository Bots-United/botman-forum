--------------------------------------------------
Subject: Class, objects, member functions , n00b help!
--------------------------------------------------
06/08/02 at 11:35:35  Posted by: Teryan (mountainguy32@hotmail.com)
--------------------------------------------------
Class, objects, member functions 
N00b help!

I am having truble understand these, plz tell me if i get it wrong (Help very mutch apprecated!!!).

class is like a car.
objects is like its windows, sterio, wheels.
member function is what it can do, start, stop.

class car // class
 double window; // object
 double warinty; / object

car = stop // member function

The dot operator assigs ting to the class (rihgt?).
car.warinty = 10;

so far so good?

tell me if it is right.  Your help is very mutch appreciated!



--------------------------------------------------
06/08/02 at 11:50:42  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
No.

A class is something in the real world that you can model (a car, a window, a door, a handle, a mirror, a lock, etc.)

An object is an instance of that class.  I can create 3 car object based on the car class and each one of them can be slightly different.  They will all have the same methods (functions) because they are all members of the car class, but they might have different attributes (member variables) like different color or different weight, etc.

The member functions are things that you can do to that class (like start, stop, push, etc.)

The member variables might be things like color, weight, number of windows, number of doors, purchase price, etc.

If parts of a car were represented as classes (body, engine, transmission, doors, tires, etc.) you could use multiple inheritance to create a car from all of it's parts.  If you weren't going to use the parts separately for something else (like boats, planes, go-karts, etc.) you might not want to make the individual parts be separate classes and just include them directly in the car class.

The '.' operator is used to access member variable or member functions for a class.  If you have a pointer to a class (car *my_car) you would use the arrow operator '->' instead of the dot to indicate "the thing that my_car points to" like my_car->start() or my_car->color.

botman

[modified on 06/08/02 at 11:50:42]
--------------------------------------------------
06/08/02 at 12:45:06  Reply by: Teryan (mountainguy32@hotmail.com)
--------------------------------------------------
Thx for the help.

let's see if i get it right this time:

class car; // delcars car class
    int speed; // member varible
    car.speed = 5.0; // saying the car speed is 5.0?
    void stop(); // member function. did i delcar that right?

car passat; // delcaring a car class to an passat object
    passat.speed; // telling pasat it's speed is the same as the cars?
    passat.stop; // telling passat to stop?


ok now how does it look?

[modified on 06/08/02 at 12:45:06]
--------------------------------------------------
06/08/02 at 13:14:40  Reply by: Teryan (mountainguy32@hotmail.com)
--------------------------------------------------
Ok Now that i think i have this.... What is wrong with the void stop?

code:
#include <iostream>


  class car // declar car class
  {
  public:
    double windows;     // declars windows as a  member varialbe
    double tires;  // declars tires as a   member varialbe
    void stop();  // a member function?
    void slowdown(); // member funcion that I want to make the car slow down!
    void speedup(); // member fucntion that will make the car speed up
    void start(); // member funcion oppisit of stop
  };

  int main()
  {
  car passat; // declares passat as a object
  passat.windows = 2.0; // assings 2.0 to passat windows (i hope)
  passat.stop() // tell passat to stop

   return 0;
  }
 


It tells me there is a problem with the : passat.stop() grrrr!  I tried it with and with out a semi colon at the end of it.  still error.

[modified on 06/08/02 at 13:13:03]

[modified on 06/08/02 at 13:14:40]
--------------------------------------------------
06/08/02 at 13:58:45  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
You will need to actually declare the stop() function...
code:
void car::stop(void)
{
   // you would do something here to stop the car
}

Stick that in before you "main" function.

botman

--------------------------------------------------
06/08/02 at 15:58:25  Reply by: Teryan (mountainguy32@hotmail.com)
--------------------------------------------------
Thank you so mutch bot man!  Here is what i made with your guidance.  You da man, da botman!

code:
/* let's see if we can do some classes...
 if we can lets have the user make it speed up and down, and stop!  Good Luck!
 lets see if we can also make the user input prices for the windows and tires,
 at the end tell how mutch the windows and tires costs.
 Jason Sullivan (Teryan)    last edited: June, 08, 2002.
 I would like to add an If/Else command when we learn them so I can have it if ther
 person was going too fast they crasy, but "if" not they would safley stop.  When reference
 and pointer's come up I would like to use those too.  Maby for the windows so i dont half
 to type "x" every time i wnat it to show up in int main()!
*/
#include <iostream>


  class car // declar car class
  {                // begin block of code
  public:
    double windows;     // declars windows as a  member varialbe (what a car is made of)
    double tires;  // declars tires as a   member varialbe
    void stop();  // a member function (something that a car can do..)
    void slowdown(); // member funcion that I want to make the car slow down!
    void speedup(); // member fucntion that will make the car speed up
    void start(); // member funcion oppisit of stop
    void speed(); //memeber function what speed is,
    void crash(); // member funcion.  I am going to have the car crash!
  };                // end block of code

  void car::speed() // lets tell the car how to stop
    {
     std::cout << "Object in motion! \n";

    };

  void car::stop() //lets tell it what stop is
//(argumetns) Class::member function(returns Void)
    {
      std::cout << "No movement! \n";

    };
    void car::start() // tell it what start is
    {
    std::cout << "Engion on! lets go! \n";
    };

    void car::speedup() // tell it to speed up with a value!
    {
     double speed = 0.0;
     cout << "You push the gass so hard you read the speed as: \n";
     cin >> speed;
     cout << "Your current speed is: " << speed << " MPH \n";
     };

     void car::slowdown() // tell the car to slow down
     {
      double newspeed = 0.0l;
      cout << "After that you dicide you were going too fast and you deicde to slow down to: \n";
      cin  >> newspeed;
      cout << newspeed << " MPH \n";
     };

     void car::crash() //crasy crasy!
     {
     cout << "Ooops you were going to fast! BOOM! \n";
     };

  int main()
  {
  double x = 0.0;
  double y = 0.0;
  cout << "Please enter how many window you have on your car: \n";
  cin >> x;
  car passat; // declares passat as a object
  passat.windows = x; // assings x to passat windows (i hope)
  cout << "You have " << passat.windows << " in your car! \n";

  // lets tell it to start
  passat.start(); // tell passat to start
  passat.speedup(); // tell the car what speed it is going
  passat.slowdown(); // take from the void car::slowdown and put it here
  passat.crash(); // all info from void car::crash go's here
  cout << "You blew out all " << x << " of your windows! \n";
  passat.stop(); // tell passat to stop
  cin >> y;

  return 0;
  }





