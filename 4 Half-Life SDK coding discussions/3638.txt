--------------------------------------------------
Subject: how am i supposed to read source code?
--------------------------------------------------
08/30/02 at 01:57:29  Posted by: ShawnD (shawnd@fuckmicrosoft.com)
--------------------------------------------------
first of all, a lot of the files start by defining something and none of the names seem to make any sense. how am i supposed to know what the heck this stuff even means?

--------------------------------------------------
08/30/02 at 02:38:17  Reply by: kippie (da_matt@hotmail.com)
--------------------------------------------------
just look where they use it in the code, you will see what they mean then

--------------------------------------------------
08/30/02 at 05:52:36  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
It kinda depends on what the variable name is.

If the developer used "good" variable names, you can figure out what it's used for just by looking at the name.  For example, it's a lot easier to figure out what "f_TimeToFireRocketLauncher" is used for than it is to figure out what "var134" is used for.

If you haven't spent time learning C or C++, do that first.  The code (and variables) won't make much sense to you if you don't understand the language.  It'd be like trying to read Chinese poetry without understanding Chinese (the characters don't make much sense).

botman

--------------------------------------------------
09/01/02 at 02:04:56  Reply by: ShawnD (shawnd@fuckmicrosoft.com)
--------------------------------------------------
i understand C++ but it's really hard to determine what these variables mean because they're names i would never think of...i'll post examples when i can. some prick i know hacked my Windows computer so i can't really get at the source code right now..

--------------------------------------------------
09/02/02 at 21:17:21  Reply by: Zipster (skyork99@juno.com)
--------------------------------------------------
Sometimes the variable names themselves are crappy, but I've noticed that the structure and class names are quite clear.  So if even you find something you can't figure out (pev is a good example), you can look at the definition and see that pev is actually an entvars_t object.  So now you figure out it has entity variables.

--------------------------------------------------
09/03/02 at 05:27:30  Reply by: Zmeko (dosap29@msn.com)
--------------------------------------------------
pev means pointer to  EntVars
more hungarian notation
http://web.umr.edu/~cpp/common/hungarian.html

[modified on 09/03/02 at 05:25:14]

[modified on 09/03/02 at 05:27:30]
