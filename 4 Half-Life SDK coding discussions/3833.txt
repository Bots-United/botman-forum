--------------------------------------------------
Subject: Mod is almost pimp status (=
--------------------------------------------------
11/11/02 at 17:31:54  Posted by: airsoftmf (airsoftasa@hotmail.com)
--------------------------------------------------
Hey botman wow learned alot scince i last talked with you like compiling cliend and i have been using tutorials to make 3rd person/nightvision and such i even have my own web site 4 my mod but still a very anoying thing keeps me from improving my mod even more. Well i have discussed this with u before i ahve been on every forum i could think of and can get an answer. well i add the new weapons succesfully but when i shoot them no flash no animation no bullet no decal but i have added some new code to my 2 weapons witch allow it to make a sound here is the colt.cpp maybe you or someone else could help me find these little bugs thanks a bunch

here is some eye candy http://airsoftasa.tripod.com/atfahalflifemodification/ NOTE: every one has been given  credit (=


/***
*
*      Copyright (c) 1996-2001, Valve LLC. All rights reserved.
*      
*      This product contains software technology licensed from Id 
*      Software, Inc. ("Id Technology").  Id Technology (c) 1996 Id Software, Inc. 
*      All Rights Reserved.
*
*   Use, distribution, and modification of this source code and/or resulting
*   object code is restricted to non-commercial enhancements to products from
*   Valve LLC.  All other use, distribution, or modification is prohibited
*   without written permission from Valve LLC.
*
****/

#include "extdll.h"
#include "util.h"
#include "cbase.h"
#include "monsters.h"
#include "weapons.h"
#include "nodes.h"
#include "player.h"

enum colt_e {
      COLT_IDLE1 = 0,
      COLT_SHOOT1,
      COLT_SHOOT2,
      COLT_SHOOT_EMPTY,
      COLT_RELOAD,
      COLT_DRAW,
                COLT_HOLSTER,
                COLT_ADD_SILENCER
};

class CColt : public CBasePlayerWeapon
{
public:
      void Spawn( void );
      void Precache( void );
      int iItemSlot( void ) { return 1; }
      int GetItemInfo(ItemInfo *p);

      void PrimaryAttack( void );
      void ColtFire( float flSpread, float flCycleTime, BOOL fUseAutoAim );
      BOOL Deploy( void );
      void Reload( void );
      void WeaponIdle( void );
      virtual BOOL UseDecrement( void )
      { 
#if defined( CLIENT_WEAPONS )
            return TRUE;
#else
            return FALSE;
#endif
      }

private:
      int m_iShell;
      

      unsigned short m_usFireColt1;
};

LINK_ENTITY_TO_CLASS( weapon_colt, CColt );


void CColt::Spawn( )
{
      pev->classname = MAKE_STRING("weapon_colt"); // hack to allow for old names
      Precache( );
      m_iId = WEAPON_COLT;
      SET_MODEL(ENT(pev), "models/w_colt.mdl");

      m_iDefaultAmmo = COLT_DEFAULT_GIVE;

      FallInit();// get ready to fall down.
}


void CColt::Precache( void )
{
      PRECACHE_MODEL("models/v_colt.mdl");
      PRECACHE_MODEL("models/w_colt.mdl");
      PRECACHE_MODEL("models/p_colt.mdl");

      m_iShell = PRECACHE_MODEL ("models/shell.mdl");// brass shell

      PRECACHE_SOUND("items/9mmclip1.wav");
      PRECACHE_SOUND("items/9mmclip2.wav");

      PRECACHE_SOUND ("weapons/colt1.wav");
      PRECACHE_SOUND ("weapons/colt2.wav");
      PRECACHE_SOUND ("weapons/colt3.wav");

      m_usFireColt1 = PRECACHE_EVENT( 1, "events/colt1.sc" );
}

int CColt::GetItemInfo(ItemInfo *p)
{
      p->pszName = STRING(pev->classname);
      p->pszAmmo1 = "9mm";
      p->iMaxAmmo1 = _9MM_MAX_CARRY;
      p->iMaxClip = COLT_MAX_CLIP;
      p->iSlot = 1;
      p->iPosition = 0;
      p->iFlags = 0;
      p->iId = m_iId = WEAPON_COLT;
      p->iWeight = GLOCK_WEIGHT;

      return 1;
}

BOOL CColt::Deploy( )
{
      // pev->body = 1;
      return DefaultDeploy( "models/v_colt.mdl", "models/p_colt.mdl", COLT_DRAW, "onehanded", /*UseDecrement() ? 1 : 0*/ 0 );
}

void CColt::PrimaryAttack( void )
{
      ColtFire( 0.01, 0.3, TRUE );
}

void CColt::ColtFire( float flSpread , float flCycleTime, BOOL fUseAutoAim )
{
      if (m_iClip <= 0)
      {
            if (m_fFireOnEmpty)
            {
                  PlayEmptySound();
                  m_flNextPrimaryAttack = UTIL_WeaponTimeBase() + 0.2;
            }

            return;
      }

      m_iClip--;

      m_pPlayer->pev->effects = (int)(m_pPlayer->pev->effects) | EF_MUZZLEFLASH;

      int flags;

#if defined( CLIENT_WEAPONS )
      flags = FEV_NOTHOST;
#else
      flags = 0;
#endif

      // player "shoot" animation
      m_pPlayer->SetAnimation( PLAYER_ATTACK1 );
               
                SendWeaponAnim( COLT_SHOOT1 );
                
                m_pPlayer->m_iFOV = 0;
EMIT_SOUND(ENT(m_pPlayer->pev), CHAN_WEAPON, "weapons/colt1.wav",
0.8, ATTN_NORM); 
             
                // silenced
      if (pev->body == 1)
      {
            m_pPlayer->m_iWeaponVolume = QUIET_GUN_VOLUME;
            m_pPlayer->m_iWeaponFlash = DIM_GUN_FLASH;
      }
      else
                {
            // non-silenced
            m_pPlayer->m_iWeaponVolume = NORMAL_GUN_VOLUME;
            m_pPlayer->m_iWeaponFlash = NORMAL_GUN_FLASH;
                }

      Vector vecSrc       = m_pPlayer->GetGunPosition( );
      Vector vecAiming;
      
      if ( fUseAutoAim )
      {
            vecAiming = m_pPlayer->GetAutoaimVector( AUTOAIM_10DEGREES );
      }
      else
      {
}

                Vector vecDir;
      vecDir = m_pPlayer->FireBulletsPlayer( 1, vecSrc, vecAiming, Vector( flSpread, flSpread, flSpread ), 8192, BULLET_PLAYER_9MM, 0, 0, m_pPlayer->pev, m_pPlayer->random_seed );

PLAYBACK_EVENT_FULL( flags, m_pPlayer->edict(), fUseAutoAim ? m_usFireColt1 : m_usFireColt1, 0.0, (float *)&g_vecZero, (float *)&g_vecZero, vecDir.x, vecDir.y, 0, 0, ( m_iClip == 0 ) ? 1 : 0, 0 );

          
                   m_flNextPrimaryAttack = m_flNextSecondaryAttack = UTIL_WeaponTimeBase() + flCycleTime;

      if (!m_iClip && m_pPlayer->m_rgAmmo[m_iPrimaryAmmoType] <= 0)
            // HEV suit - indicate out of ammo condition
            m_pPlayer->SetSuitUpdate("!HEV_AMO0", FALSE, 0);

      m_flTimeWeaponIdle = UTIL_WeaponTimeBase() + UTIL_SharedRandomFloat( m_pPlayer->random_seed, 10, 15 );
}


void CColt::Reload( void )
{
      if ( m_pPlayer->ammo_9mm <= 0 )
             return;

      int iResult;

      if (m_iClip == 0)
            iResult = DefaultReload( 17, COLT_RELOAD, 1.5 );
      else
            iResult = DefaultReload( 17, COLT_RELOAD, 1.5 );

      if (iResult)
      {
            m_flTimeWeaponIdle = UTIL_WeaponTimeBase() + UTIL_SharedRandomFloat( m_pPlayer->random_seed, 10, 15 );
      }
}



void CColt::WeaponIdle( void )
{
      ResetEmptySound( );

      m_pPlayer->GetAutoaimVector( AUTOAIM_10DEGREES );

      if ( m_flTimeWeaponIdle > UTIL_WeaponTimeBase() )
            return;

      // only idle if the slid isn't back
      if (m_iClip != 0)
      {
            int iAnim;
            float flRand = UTIL_SharedRandomFloat( m_pPlayer->random_seed, 0.0, 1.0 );

            if (flRand <= 0.3 + 0 * 0.75)
            {
                  iAnim = COLT_IDLE1;
                  m_flTimeWeaponIdle = UTIL_WeaponTimeBase() + 49.0 / 16;
            }
            else if (flRand <= 0.6 + 0 * 0.875)
            {
                  iAnim = COLT_IDLE1;
                  m_flTimeWeaponIdle = UTIL_WeaponTimeBase() + 60.0 / 16.0;
            }
            else
            {
                  iAnim = COLT_IDLE1;
                  m_flTimeWeaponIdle = UTIL_WeaponTimeBase() + 40.0 / 16.0;
            }
            SendWeaponAnim( iAnim, 1 );
      }
}








class CColtAmmo : public CBasePlayerAmmo
{
      void Spawn( void )
      { 
            Precache( );
            SET_MODEL(ENT(pev), "models/w_coltclip.mdl");
            CBasePlayerAmmo::Spawn( );
      }
      void Precache( void )
      {
            PRECACHE_MODEL ("models/w_coltclip.mdl");
            PRECACHE_SOUND("items/9mmclip1.wav");
      }
      BOOL AddAmmo( CBaseEntity *pOther ) 
      { 
            if (pOther->GiveAmmo( COLT_MAX_CLIP, "9mm", _9MM_MAX_CARRY ) != -1)
            {
                  EMIT_SOUND(ENT(pev), CHAN_ITEM, "items/9mmclip1.wav", 1, ATTN_NORM);
                  return TRUE;
            }
            return FALSE;
      }
};
LINK_ENTITY_TO_CLASS( ammo_coltclip, CColtAmmo );




















