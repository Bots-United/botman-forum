--------------------------------------------------
Subject: Vehicle wont adjust to slope!
--------------------------------------------------
02/06/03 at 21:23:09  Posted by: mmx87 (mmx87@fuckmicrosoft.com)
--------------------------------------------------
Hey all.

I wanted to code some vehicles for a mini mod I am doing, and I got the vehicle code down good (its the modified func_train), but when I try to make the vehicle adjust to a slope, it just goes straight through!  

Here is my code:    
TraceResult down;
Vector vecdown = pev->origin + gpGlobals->v_up*(-47); //47 is 1/2 height of my jeep
UTIL_TraceLine(pev->origin, vecright, ignore_monsters, edict(), &down); 
Vector slope_angle = UTIL_VecToAngles(down.vecPlaneNormal);
pev->angles = slope_angle;
pev->angles.x += 90;
pev->angles.y += 90;

I did everything you told the other guy to do here: http://dynamic.gamespy.com/~botman/yabb/YaBB.pl?board=4&action=display&num=2970 , but it still doesnt work! I first tried messing around with which angle values should have 90 added to them (angles.x y and z), and this is the only way the vehicle is aligned correctly; although, with this code, it wont let me turn my vehicle!  

The only other reason I could think if the code not working is that it isnt getting called each frame; I added some print commands in there, and they printed to the console, so I know this code is getting called each frame.

Anyone know why this doesnt work?  This has been puzzling to me for a while, I just can't figure it out :P.  

Thanks for your time,

  

[modified on 02/06/03 at 21:23:09]
--------------------------------------------------
02/07/03 at 05:19:58  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
I would try tracing a little further than 1/2 the vehicle height (assuming the origin of the vehicle is at the center).

I usually trace a line twice as far as I expect it should need to go.  Try changing your -47 to something like -100 and see if that helps.

botman

--------------------------------------------------
02/07/03 at 05:23:44  Reply by: mmx87 (mmx87@fuckmicrosoft.com)
--------------------------------------------------
Ok, thanks botman.  If I can get this to work, I will post a tutorial on hlpp or hlprogramming, so there will not be as many vehicle questions.

--------------------------------------------------
02/07/03 at 13:40:31  Reply by: mmx87 (mmx87@fuckmicrosoft.com)
--------------------------------------------------
It doesnt work, it still goes through the ground, and it doesnt let me turn anymore.  

How do the counter-strike vehicles work?  When you make a counter-strike vehicle, you define a length and width of the vehicle.  Why would you need that?

I was thinking, maybe if you can detect that the origin is touching the ground, then the vehicle would change its pitch and roll to match the surface.  I know that would look weird, and it would "dig" into the ground, but do you have any other ideas besides using tracelines? (because they are not working for me)

--------------------------------------------------
02/07/03 at 14:07:44  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
I'm pretty sure the vehicles in Counter-Strike are using tracelines at each corner of the vehicle to adjust the slope of the vehicle.  They probably trace a line down to the ground from each corner of the vehicle then calculate a vector from one corner to the two corners next to it to determine what the slope of that edge should be.  This gives them the pitch and roll of the vehicle (I don't think they worry about yaw since I don't think they have vehicles that slide around like you'd see if it was "fish tailing").

botman

--------------------------------------------------
02/09/03 at 15:11:50  Reply by: mmx87 (mmx87@fuckmicrosoft.com)
--------------------------------------------------
Ok, I have been working a bit with my code, and I have come up with this:

TraceResult down;
Vector vecdown = pev->origin + gpGlobals->v_up*(-100); 
UTIL_TraceLine(pev->origin, vecdown, ignore_monsters, edict(), &down);
Vector slope_angle = UTIL_VecToAngles(down.vecPlaneNormal);
slope_angle.x += 90;
slope_angle.y += 90;

if(!(slope_angle.x == old_slope_angle.x) (or) !(slope_angle.y == old_slope_angle.y))
{
     pev->angles = slope_angle;
     old_slope_angle = slope_angle;
}

When I get in my jeep and go forward with that code, my jeep constantly flips upside-down to right-side up.  Im thinking it is a problem with the line that says slope_angle.x += 90;?  Maybe I should add 90 to pev->angles.x and .y, instead of slope_angle :P.

Anyone have any ideas?

[modified on 02/09/03 at 15:11:50]
--------------------------------------------------
02/09/03 at 15:19:25  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
x angles are bound to 89 max (in absolute value). If you set them to 90 or above, the results are unpredictable ; but the symptoms you describe are definitely known to occur together with this problem.


--------------------------------------------------
02/09/03 at 17:15:22  Reply by: mmx87 (mmx87@fuckmicrosoft.com)
--------------------------------------------------
Ok, I was curious, so I decided to see what slope_angle was while the vehicle was turning upside down and stuff, and I found the the slope_angle.y alternates between 1079410688 and 1081139200.  Weird eh?  

Well, what should I add to the vehicle's pev->angles then?  If I set it equal to the slope_angle, then the vehicle is perpindicular to the surface.  I tried adding 89 instead of 90, but it still did the flipping thing :P.

This is so confusing!!  

--------------------------------------------------
02/10/03 at 05:10:55  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
'ummm, angles are stored as float.
Not integers.
Might help :)


