--------------------------------------------------
Subject: BOT SENSES - PREDICTION
--------------------------------------------------
11/07/00 at 16:16:31  Posted by: FuckFace (gellert.lukacs@dbs.hu)
--------------------------------------------------
foreword at BOT SENSES - IDEAS topic

maybe the most interesting part in BOT sensing is the prediction system. This system would give 'hints' or 'calculations' on the enemy position. This is again, an extra info in the bot's knowledge which may help him to decide what to do.

The prediction system basically would be able to tell where the enemy could be if it was seen at Time T1. At T2, the bot would be able to compute the possible enemy position(s) based on the average (or max) player speed, and available directions. This can help the bot to slow down, or at least to be ready for the enemy...

sorry, I have no specific ideas about this topic, but it would certainly require a well normalized wpt graph. I'm sure that bots in the end must all use waypoints no mater how the acquired it (manually or automatically).



--------------------------------------------------
11/08/00 at 03:05:35  Reply by: theimann (theimann@stud.fh-heilbronn.de)
--------------------------------------------------
The prediction using the waypoint graph should work well and can be implemented easily if you are using Dijkstra's algorithm: It stores all waypoints already reached in a stack and generally continues until all nodes of the graph are visited. You could modify it to stop when a certain distance is reached and - voila - in the stack you've got all the positions where your enemy could be moving at maximum speed...

Tobias

--------------------------------------------------
11/08/00 at 03:42:47  Reply by: William (william@botepidemic.com)
--------------------------------------------------
If you use a 'flood fill' approach (as suggested by Tobias), you can prune it as well:
- the threat obviously isn't at locations that you can see for 100% (otherwise, you wouldn't be predicting)
- if you didn't move much, the threat also didn't travel via locations you could see for 100%

This has been on my 'to do' list for a long time already, under the name 'negative observations'.

In addition, I'm considering predicting movement for sniper threats differently: they are less likely to really move away from their position than other threats.

William

p.s. note that 'flood fill' can also efficiently be implemented when using the outgoing neighbor way points and a table containing minimum travel distances between a pair of way points.

