--------------------------------------------------
Subject: Classification
--------------------------------------------------
11/21/00 at 10:13:18  Posted by: FuckFace (gellert.lukacs@dbs.hu)
--------------------------------------------------
Hello,

I'm busy with giving you people work if you happen to have spare time. Anyway, my concerne is to partition the work so it most likely will be independent of any existing source code.... Sorry I keep on trying... :)

Here's the deal:

I'm almost at the point where I give up the bot development as a whole, but some parts still attract my attention. One of these tasks is the classification of a particular position on a map. It is obvious, that a bot can always benefit from the better "understanding" of its environment!

I mean, that by using a number of trace lines we can somehow describe the bot's environment, and if we can define some rules, we can even make assumtions about a particular feature.

For example, if the bot is somewhere in the map, and we trace for obstructions we can say, that if we can find a solid something in a 90 or so angles and nothing on the other 270 we are most likely in a CORNER...

Well, this is not that easy but I'm sure you get the point. There are a lot of formations that we can classify this way.

Now, I believe that any of you can make a list of possibly classifiable places. And because the only thing in this classification process is a so called TraceLine, it can be implemented in a way where the input might be only an edict_t and the outpoy can be a pos and a class.

So If you have spare time to think, please share ideas of how a place can be classified. E.G. a "HOLE" in a "WALL" can be called a "WINDOW" or a "DOOR". or If We have something above as, and have WALLS around us, we are in "closed place". The closed place might be a ROOM if it is small, a HALLE if it is large or a TUNEL if it is long:))

I know that these code fragments will not run fast enough to be used all the time. But ocassionally - maybe when a waypoint is created - this analysis can be run to provide additional info for the upcoming "tactics engine"

I'm struggling to imagine how a bot can effectively KNOW its environment, but sooner or later I will provide code on this mater. 



--------------------------------------------------
11/21/00 at 10:54:33  Reply by: William (william@botepidemic.com)
--------------------------------------------------
I happen to have this implemented, taking over 10,000 lines of C++, 3 months, running for 5 minutes to classify a whole level, classification is only 85% correct, and I'm struggling to have the AI use it effectively.

I doubt it is the most important thing to implement right now. Taking the Podbot as one of the most advanced (CS) bots today, it has a few simple omissions that mean a lot to the gamers out there:
- realistic vision, aiming
- modeling of threats, their position, relevance, and predicting threats out of sight
- team behavior, and coordinated attacks / defense

These problems require far less effort (except for the team behavior), and result in greater benefits at the short term.

Don't get me wrong. I do appreciate more people exploring the same things I'm working on. However, if you're quite new to bot development, it might not be that smart to dive into something this large and problematic.
And if you do bot programming partially because you want to make it into the gaming industry, don't bother starting to work on classification: it's something a game company would fix in 1 hour as a annotation in the level editor (similar to the way HL surfaces are annotated for the kind of sound / acoustics they generate).

William

p.s. the CGF news updates here ( http://www.botepidemic.com/aid/cgf/index.shtml#terrain and http://www.botepidemic.com/aid/cgf/index.shtml#aipuzzle ) hint at the terrain classification. There'll be another update in the coming two weeks.



