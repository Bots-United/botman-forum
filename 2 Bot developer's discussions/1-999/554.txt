--------------------------------------------------
Subject: BOT SENSES - TEAM KNOWLEDGE
--------------------------------------------------
11/07/00 at 16:32:41  Posted by: FuckFace (gellert.lukacs@dbs.hu)
--------------------------------------------------
foreword at BOT SENSES - IDEAS topic

Team knowledge might be an unwanted advantage for bots but may simulate an environment where human player plays in a room, warning each other to events what others may not be aware of.

this is basically the idea of the bots accessing each others environmental info to improve their own. EG: if bot A can see enemy E and enemy E can see bot B but bot B can not see E, then bot B may know from A that E is actually aiming at it. There should be some common data layer for this knowledge sharing to simulate human like information exchange. (maybe only 1 second old events are made common)

on more technical ground, after a 'team knowledge' query, the bot may have additional information about event's what he can not sense. In real life a human would say: "Theye are at the low end of the tunel.." (cs_italy), bots would most probably transfer coordinates. However they can also fake screen messages and maybe suit sounds as well...

Team knowledge must have an other important role. They will know each-other occupation, which will allow them to play teamwork. (than againg this must be done by the analyse system which should get all info from the bot's senses)





--------------------------------------------------
11/08/00 at 02:25:24  Reply by: theimann (theimann@stud.fh-heilbronn.de)
--------------------------------------------------
The approach you are describing is used in multiple agent systems: Several individual agents combine their knowledge in a global database. You could implement this by a blackboard object, that collects data from all bots and can be queried as well.
Good idea! Although I think this as well has already been implemented for Q2 - William had at least planned an article on multiple agents on the AID-page (doesn't work yet...)

Tobias

--------------------------------------------------
11/08/00 at 02:45:59  Reply by: William (william@botepidemic.com)
--------------------------------------------------
I've indeed implemented this 'intra-team communication' in CGF. In CGF, information flows instantaneously, which technically is cheating... (but adding a .5 second communication delay would be more work, and lead to a similar result).

For performance reasons, the intra-team communication is tightly knit to the threat tracking code.

Related to this is the correct generation of radio traffic (you don't want a bunched up squad of bots do "team report in" messages to each other, when they can see each other).

Between the CGF teams, they communicate using AQ2 radio messages ('need backup').

General advice: don't bother too much creating more info for the bots to use without writing the AI part that consumes and uses that data first. 
If your AI lacks decent team attack planning, there's little need to collect and exchange detailed information on presumed enemy positions.

(Of course, I'm guilty of making that mistake myself, and that's why I'm warning you).

Also: have a look at the HL SDK, since its squad behavior also exchanges threat info within the squad.

William


--------------------------------------------------
11/08/00 at 05:27:35  Reply by: botman (botman@mailandnews.com)
--------------------------------------------------
Yes, definitely take a look at the Full SDK source code.  Anyone who has played the Half-Life single player game knows very well how the squad leader reports threats to the team members and the team members advanced, take cover, or spread out based on that threat information.

botman

--------------------------------------------------
11/08/00 at 06:43:11  Reply by: William (william@botepidemic.com)
--------------------------------------------------
quote:
<i>Anyone who has played the Half-Life single player game knows very well how the squad leader reports threats to the team members and the team members advanced, take cover, or spread out based on that threat information.</i>

IMO, the communication part of the HL squad is good. The execution of the HL squad maneuvers isn't very sound, and primarily works well thanks to level designers setting-up the battle positions.
Basically, the AI doesn't have much of a clue about tactical positions, cover, lines of fire, etc. For example, you can have grunts walk past you to find cover from you...
(Nevertheless, it did what it needed to do to make a great game, and was better than most other games out there).

William

--------------------------------------------------
11/08/00 at 14:59:57  Reply by: FuckFace (gellert.lukacs@dbs.hu)
--------------------------------------------------
Thank you guys. I just came to realize the power and experience of this community. I can really make a list of questions which - if answered - could help me a lot in technical details. If any of you feels like answering questions pls. send me a mail!

and an other thing: if there are so many bot templates, and already impemented things are readily available, why is not there a lot of good bots? <no offece for the ones that are actually out there>

--------------------------------------------------
11/09/00 at 04:20:43  Reply by: William (william@botepidemic.com)
--------------------------------------------------
I'm definitely interesting in seeing your detailed questions. Hopefully, they help me in fighting a few assumptions that I incorrectly make about my own solutions. I cannot promise to answer them all though.

Wrt bot templates and things already done, and not resulting in terrific bots:
+ writing really good AI for something more complex than a DM bot takes 6 to 18 months and 60 to 120K lines of code, and one or two redesigns; most people lack the time, perseverance, ambition, etc. to do this.
+ most templates and bot sources out there excel in one area, but are weak in another. Examples:
- botman's work: great in HL compatibility, 'lean' on AI
- Unreal AI sources: great on explicit design (state machines, events), limited in path finding (not publically available) and performance (UnrealScript)
- HL SDK: great on use of emergent (squad) behavior, weak on autonomy (iow, the HL game AI isn't a good base to build bots on)
- Eraser for Q2: great in its completeness (DM, TP, CTF), lacks pathfinding (not published), and hard to comprehend and edit
- Frogbot for Q1: great in DM concepts (even some area awareness), heavily geared to limitations of QuakeC script
- SABIN for Q2: heavy on useful mechanisms (events, hearing, finite state machine?), but full of bugs and incomplete
- ACE for Q2: great in simplicity 
- John Laird's academic integration of the SOAR agent framework, and Q2: great on high level concepts, poor on performance
- Ono Sendai's Neuralbot for Q2: great on neural networks, limited on behavior

There's also the Aliens vs. Predator, the SIN, etc. sources out on the net (but I cannot remember their specific contributions).

+ most developers who base their work on templates are happy to change details, but have troubles building large pieces of AI from that foundation (see this message board)

+ some AI's that do advanced things just haven't been published (the Gladiator / Quake3 AI for Q2/Q3)

Of course, no matter what you do or invent: there's always someone who tells you (s)he's been there already (as the proverb says: the best horsemen are always on their feet). 
Sometimes, I'm that annoying guy.

William

