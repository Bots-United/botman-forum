--------------------------------------------------
Subject: Neural Networks
--------------------------------------------------
09/01/00 at 13:36:55  Posted by: AcidBurn (aH@hotmail.com)
--------------------------------------------------
Has anyone considered creating a bot that would use Neural networks and genetic algorithoms. I think that a bot that learns how defend against your own tactics would be great for improving your overall skill and the fun of the game. I considered this writing my own but realised I don't know enough to implement Neural Nets.

Any thoughts...

--------------------------------------------------
09/02/00 at 00:13:34  Reply by: William (william@botepidemic.com)
--------------------------------------------------
The idea of using NNs and GAs is an interesting one in theory (the capability to learn to tackle problems without having to fully understand these problems), but in practice and for games with non-trivial rules, and (more importantly) non-trivial environments, they don't get far.

One problem is that in 3D action games, the role of terrain is a large one. You need to understand how to navigate the terrain, how to pursuit enemies, etc. Learning that knowledge into a (map specific) NN might be possible, but would require a large number of extra inputs, hidden cells, and training time.

In general, it it hard to come up with a good evaluation function for bot behavior. Advanced DM players do have good movement and aiming skills, but also excel in predicting enemy movement & behavior, and know which parts of the map are of strategic importance. Just try to find the evaluation/feedback function that encourages bot behavior at both movement (.1 second) and strategic (> 10s) level ...

In combination with dedicated logic, NNs and GAs have been used with some success in the field of robotic soccer (www.robocup.org - see the synthetic league). However, the rules of soccer and notably the terrain used (a flat field) are significantly less complex than the 3D game worlds.

There has been one serious attempt at NN (for Q2), see http://www.botepidemic.com/neuralbot . That bot used a large number of inputs, and was succesfully able to learn some trivial behavior that could have been implemented in a few days and run far more efficiently using dedicated code.
(I do applaud the attempt, and the way Ono Sendai did his work and research). There's plenty of info around at that site.

William

--------------------------------------------------
09/05/00 at 18:53:09  Reply by: Ruru (s.paul@auckland.ac.nz)
--------------------------------------------------
I posted my GA thread before I spotted this one.

The waypoint system that peope use seems to be successful for them. Why can't a way map be made dynamically? 

As long as you can save state data, this could be highly successful. You could also prempt this by adding a way map for common maps. This would mean that only for original maps would the bot utilise its dynamic creation.

The flow of control would now be based on how complete your way map was (e.g. have I discovered a hostage location yet?) 

One could also argue, given a GA environment, that ALL maps are dynamic, forever being updated. 

Just a thought....

--------------------------------------------------
09/11/00 at 09:13:46  Reply by: Displeaser (displeaser@hotmail.com)
--------------------------------------------------
there is a bot for CS which assumidly uses neural networks. Heres its addy:

http://nnbot.counter-strike.dk/

--------------------------------------------------
09/12/00 at 09:17:57  Reply by: sun-tzu (huseyinsikici@hotmail.com)
--------------------------------------------------
Does anyone know any other open source Bots? Thank god botman opensourced his, nobody else seems to follow his example. I just was curious about different AI techniques in CS bots. RamBot, Android, nnbot are all closed-source.

--------------------------------------------------
09/12/00 at 10:34:25  Reply by: botman (botman@mailandnews.com)
--------------------------------------------------
There's the source code for Rho-bot.  It was never ported to the SDK 2.0 stuff, but it still may give you some ideas...

http://www.gamershomepage.com/rhobot/

botman

--------------------------------------------------
09/13/00 at 14:08:43  Reply by: AcidBurn (adam_hines@hotmail.com)
--------------------------------------------------
Well,
Thanks for the help. I will probably start my own using a combination of backprop and GA to train the NN. If anyone has any interest in helping, email me. 

I realise that it will probably suck skill wise in comparison to other bot's because the bot is still in it's infancy which only proves my point that - Babies are stupid - 

www.theonion.com/onion3119/stupidbabies.html

I am willing to except the fact that it will suck horribly because it's the concept that counts.

Adam

--------------------------------------------------
09/14/00 at 00:37:07  Reply by: William (william@botepidemic.com)
--------------------------------------------------
Hi,

good luck. please let me know how you're doing, since I'd like to learn more about what NNs/GAs can and cannot do in a Q/HL world.

I suspect the selection of inputs and design of the evaluation function (feeding into the backpropragation) will be the most critical parts of your design.

You may want to send an email to Ono Sendai of the Q2 NN bot to get some do's and don'ts (or his sources); he is a nice guy.

William

--------------------------------------------------
09/15/00 at 14:00:28  Reply by: AcidBurn (adam_hines@hotmail.com)
--------------------------------------------------
Yeah,
I agree that that the most critical part is the selection of input values. You can't have to few because the results would be to general and you can't have to many because then the results become to specific and would be difficult to train. I've already been talking to Ono, and his source code is on the website. I plan to start from scratch as far as the AI goes. I will probably model the actual structure after another bot. Will be tough to squeeze all this through my schedual though!

Adam

--------------------------------------------------
09/22/00 at 06:25:51  Reply by: theimann (theimann@stud.fh-heilbronn.de)
--------------------------------------------------
I tried to figure out some input variables suitable for genetic algorithms: The problem is that the more input you have, the more selection you have to perform on the chromosomes to get acceptable results.
The absolute minimum would be 10 different variables (not sufficient for real navigation but acceptable for combat) which would result in a 4kB chromosome. Now imagine the number of possibilities there are!
Given that the fitness function used for selection would need at least one minute per generation (of at most 10 bots), I guess you could let the bots develop for days without getting acceptable results.
And with 20 input variables you get 4MB  chromosomes and probably years for selection.
Nevertheless I agree that it is one of the most interesting fields in AI.


--------------------------------------------------
09/26/00 at 18:59:26  Reply by: AcidBurn (adam_hines@hotmail.com)
--------------------------------------------------
I certainly is fascinating. But your right, with GA it would literally take forever for the number of inputs you would need for realistic results. This is why if I ever getting around to starting my bot it will use backprop to train the bots by monitoring the user playing, and then once they can do anything useful, us GA to further continue their developement, with mutations and such. I personally see this as the best way to go as it eliminates a large portion of the lower end of the GA learning curve.

Adam

