--------------------------------------------------
Subject:  Object Oriented Programming
--------------------------------------------------
06/20/02 at 08:58:39  Posted by: msummers (msummers@scires.com)
--------------------------------------------------
Why does it seem like no one is developing bots using an OOP approach?

--------------------------------------------------
06/20/02 at 11:37:37  Reply by: Cheesemonster!!! (paul.murphy@ntlworld.com)
--------------------------------------------------
maybe because botmans template didn't :D... because the bot didn't really need its own functions as many functions that came with the engine could already be used, so no need to duplicate these functions in a bot class unless you really wanted to.

If you wanted, you would be better making the bot nicely "OOP'd" (or "OO"'d i should say) if wanted to give the bot its own unique functions.

[modified on 06/20/02 at 11:37:37]
--------------------------------------------------
06/20/02 at 12:23:26  Reply by: @$3.1415rin (joebot@botepidemic.com)
--------------------------------------------------
it's no problem to convert botman's code to code more oo :D
Especially for multi mod support it's nice, because you can inherit stuff from other mods ...

--------------------------------------------------
06/20/02 at 23:25:03  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
i am working on transforming the code more OO like. 

I am still thinking how i would do best:

like, how would the engine messages be programmed? Should they be left outside the class and just call a class function (engine class for example, or i would say the game class).

E.g. you have startframe()

i do it now like this (although i have to recode the think function!)

code:

void startframe() // here is that startframet hingy, whatever
{
 CGame->Think(); // all is done here..
// end of my code.

}




anyhow i am not even at 10% so dont bother me how i have done specific things. As Aspirin said, it is nice to enhirit classes. So you have a general thinking and a mod thinking, and depending on the mod your bot thinks different.

--------------------------------------------------
06/21/02 at 10:40:29  Reply by: PM (baty.pm@libertysurf.fr)
--------------------------------------------------
I would love to talk about that multi-engine stuff in Amsterdam w/ you since I'm very interested in this feature too. No time for searching yet, and I still haven't recovered my data from my HD crash but this is one thing I'm certainly to work on as soon as possible.

C ya there...

--------------------------------------------------
06/21/02 at 11:37:27  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
i think you are mixing up 2 projects pierre ;) The multi-engine multi-mod principle is atm at tubs computer. He coded the current frame. I am coding the current botman frame into OO. Maybe it could be used for different engines aswell, but that was not really the intention. Its merely for learning more about classes, and get a lot cleaner code for multiple mods.

Atm i got it working like in the sdk! W00t. 

Mod->Think()

makes the bot think about the bot that is loaded! :D

--------------------------------------------------
06/21/02 at 11:39:45  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
btw do note that the starframe example above is what i want! Its getting smaller every time, so slowly i am reaching my goal :)

--------------------------------------------------
06/22/02 at 08:27:51  Reply by: mattkimbo (mattkimbo@yahoo.co.uk)
--------------------------------------------------
Mike, I think most people use Botman's source code as many people who start developing bots for half-life have never done any C++ coding before and just want to learn (I did that approach) and start by just programming without O.O.

Works fine, until your bot is MEGA HUGE and you have to hunt through code for ages or copy large blocks of it, For example, my HTBot until now has always been without O.O. as it was based on a bot frame used by TheFatal. It's a great frame to use as it's pretty bare.

I think O.O. comes into play where you want an orderly system of programming, and where when you want to add new variables for the bot, you don't have to re-compile the whole dll (I had todo this in basemonster.h). I've never taken a real interest in botman's source layout, just chunks of it because I feel it's more mine that way.

I wouldn't worry to much about O.O unless you think your bot is gonna get huge (I'd say that to most people any how) Porting the code to Object orientation takes at least a couple of weeks including testing. 

O.O. is a bit complex for beginners anyway, so i can see why Botman may have set it out as he did.

--------------------------------------------------
06/23/02 at 10:35:48  Reply by: theimann (killaruna@nuclearbox.com)
--------------------------------------------------
OO is not generally more complex, it just requires that you know the problem you are dealing with and that you know how to seperate it into various, preferably independent subproblems, each of with you can implement in an own class.
Since you normally don't have an idea of which components you need for a high-level AI opponent, it's very hard to come up with a good design for your first bot. Most probably you'll have to change the design several times while your bot evolves. Nevertheless, it's worth the pain IMHO, since you learn a lot about clean and extendable software design in this process.

--------------------------------------------------
06/24/02 at 08:54:36  Reply by: msummers (msummers@scires.com)
--------------------------------------------------
I just saw the OO approach as a logical one because you could have a base class of "bot" and under it have subclasses of terrorist, counter terrorist, HW_guy, etc and they could all share common functions like those in bot_navigate but would have different BotThinks for example. I was just surprised that it seemed like no one had taken this approach. 

