--------------------------------------------------
Subject: BOT SENSES - IDEAS
--------------------------------------------------
11/07/00 at 15:26:07  Posted by: FuckFace (gellert.lukacs@dbs.hu)
--------------------------------------------------
Hi Everyone,

in the folloving few topics I will describe some ideas of how I imagine a BOT sesnsing system, which will not only improve (IMHO) the BOT's human like behaviour but may help split up bot development. (I've read about those difficulties in some previous threads). If you do not like this kind of HOTSHOOTINGS please let me now, and I'm off(topic:)

The bots already have some parts which is implemented in a fairly usable way. This is mainly the vision. I feel that the feedback from those senses is somewhat too 'direct'. 

'if bot can see the enemy shoot at it'
'if bot can hear the enemy running, turn towards..'

these are good points. but, what if we simulate the sensing, and separate them from what the bot is actually doing. more on this later.

By categorizing the senses we can
- implement a separate vision system, which finally returns an array of 'interesting directions'
- implement a separate hearing system which also returns an array of 'interesting directions'
- based on the above, we can have a prediction system which again may return an 'interesting places' array. (this might be difficult'
- based on the BOT's 'INFO ABOUT THE WORLD', we can make a global knowledge base for teams, so for example what a BOT sees or hears, other bots may know about....

finally, we can use the 'interesting places' info, to decide where to go, what to shoot etc..

The most important thing is, that this layering will allow some sort of a project based approach, where - after some grounding - a few people can work together.

???

--------------------------------------------------
11/08/00 at 03:50:54  Reply by: William (william@botepidemic.com)
--------------------------------------------------
Hi Gellert,

though your proposal shows good insight in what it takes to create a good AI, you're ignoring a few software engineering issues (see below).
I expect that the only way your ideas are going to shine is to start implementing them yourself, and publishing the design (in detail) and/or the implementation.

With the arrival of Quake2, a 'big bunch of Quake1 bot authors united' started a common project to increase momentum, share code, and learn more.
Basically, it went nowhere...

In hindsight, the major reasons for the failure were:
+ without a shared architecture (AI, but also code archive, CPU budgets), it's close to impossible to combine code
+ without clear goal (a commercial example to copy), it's hard to have people work in the same direction
+ bot AI requires specialization to various forms of gameplay (implementations that support TFC well often make little sense for CS, for example)

See http://www.planetquake.com/botshop/sabin.html for the failing project.

In addition, note that the HL community lost a lot of experienced bot developers when Valve was 7+ months late in delivering an SDK and engine capable of running bots. Most of the experienced Q1/Q2 bot developers moved to other games, or stayed with their Qx. Almost all HL bots are developed by (no offense intended) newbie bot developers (witness the struggles here to get way points operating efficiently using Floyd/A*).
As a result, if you want to speed up HL bot development, you might want to try reengineering the best of the published Qx bot source code. There's little in your ideas that hasn't been implemented for Qx already, though not all of that has been published (or stated as clearly as you put it).

I do have a few detailed comments about the other senses (in the other threads).

William

p.s. I have the CGF architecture sketched here:
http://www.botepidemic.com/aid/cgf/design_overall.shtml
Note that it provides insight in how the AI is organized, but that it absolutely is insufficient to get a few developers work together.



--------------------------------------------------
11/08/00 at 05:19:53  Reply by: botman (botman@mailandnews.com)
--------------------------------------------------
Good points.

I'm always amused by people who post suggestions that are next to impossible to implement or would require massive amounts of CPU time or memory to be done effectively.  I encourage people to make suggestions about how computer controls players can be made more lifelike or be more intelligent, but don't make the assuption that bots can be made to behave anywhere near as well as humans in evaluating situations that they haven't been explictly programmed to deal with.

botman

--------------------------------------------------
02/25/01 at 19:55:14  Reply by: ExecutionStyle (c_brennan@hotmail.com)
--------------------------------------------------
Hi everyone, I'm new here so don't mind me resurrecting an old post.

Botman, I'm really surprised that you think Gellert's ideas would require massive amounts of CPU or memory.  Of course, writing code to make a nearly human decision process would need a lot of really elegant solutions to hardware limitations, but I'd hardly say it's nearly impossible.

I think it's a sign of impending discoveries when new ideas are thought of as "impossible".  :o)


Lastly, when you say:

"don't make the assuption that bots can be made to behave anywhere near as well as humans in evaluating situations that they haven't been explictly programmed to deal with."

I say: 

"wait and see ;o)"

-Carl

ps Gellert, great ideas and keep 'em coming.  I agree with William that a team project to directly code a bot would be more trouble than it's worth, but I think that developing concepts to use in bot design, or at least talking about them like this, will help all the people wanting to make their bot better.



