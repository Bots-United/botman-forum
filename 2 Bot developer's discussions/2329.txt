--------------------------------------------------
Subject: MSG_PVS MSG_PAS ?
--------------------------------------------------
09/29/01 at 20:44:04  Posted by: PlasticWarrior (tigerstorm023@netscape.net)
--------------------------------------------------
umm ok when i'm making a tempentity i can set the broadcast type to those potentieally visible and audible sets, but if i do this, will it tax the server much to look through the bsp tree? Also, what do some of the other less descriptive message types do and can you explain exactly the diffrence between the reliable and unreliable streams?

#define      MSG_BROADCAST            0            // unreliable to all
#define      MSG_ONE                        1            // reliable to one (msg_entity)
#define      MSG_ALL                        2            // reliable to all
#define      MSG_INIT                  3            // write to the init string
#define MSG_PVS                        4            // Ents in PVS of org
#define MSG_PAS                        5            // Ents in PAS of org
#define MSG_PVS_R                  6            // Reliable to PVS
#define MSG_PAS_R                  7            // Reliable to PAS
#define MSG_ONE_UNRELIABLE      8

[modified on 09/29/01 at 20:44:04]
--------------------------------------------------
09/30/01 at 04:40:52  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
All Half-Life network packets are sent using UDP.  UDP (unlike TCP) is not an end-to-end reliable protocol.  UDP network packets can get lost between the sender and receiver.  The unreliable mode just sends the packet and hopes that it gets there.  This is used for things that aren't critical (like updates players scores for example).  The reliable mode sends a packet from the server to the client and waits for a response from the client telling the server that the packet arrived sucessfully.  If the server doesn't receive a response from the client after some amount of time, the server will resend the packet until the client acknowledges it.

The PVS (potentially visible set) and PAS (potentially audible set) are fairly quick to calculate so don't worry about performance problems here.  It's no where near as complicated as rendering a video frame.

All of these network packets are described in the ReadMe.txt file that comes with the HPB bot template source code.

botman

