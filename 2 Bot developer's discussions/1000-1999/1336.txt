--------------------------------------------------
Subject: Open ideas -- Revealing edges
--------------------------------------------------
03/10/01 at 09:54:52  Posted by: ExecutionStyle (c_brennan@hotmail.com)
--------------------------------------------------
This is something that I just thought of in the last week or two.  It came about from playing CS and 'watching' what I was doing.  I noticed that as I walked through a map, my eyes were focused on areas ahead of me where enemies might appear, and not only 'areas' ahead of me, but the each edge of each wall that was hiding something from my view.

Say you're walking down a hallway with a sharp bend to the right ahead.  Your attention will be focused on the end of the wall to your right, because if an enemy is going to appear on the screen, it must appear on that precise line.  It can't just pop into existence in the middle of the room or drop from the ceiling.  (If there was a hole in the ceiling, then there would be a second "revealing edge" at the rim of the hole, and it would reveal more and more of what was in the hole as you got closer to being underneath it.)

What do you all think of storing these edges for use in creating a more realistic response to the appearance of other entities?  There would be few edges relative to the size of the map.  You could categorize regions based on how many edges were in them, with more edges being more dangerous and less edges being easier to watch and guard.  You could adjust reaction times based on how far an edge was from the bot's vision vector.  Also, you could use it to find cover since each edge could be used to hide from what is ahead as well as to reveal it.

 -Carl

--------------------------------------------------
03/10/01 at 18:44:22  Reply by: CountFloyd (countfloyd_1999@yahoo.com)
--------------------------------------------------
Basically I think it's a good idea. But how would you get the edges in realtime ? Seeing that your masterplan for your Bot involves analysing the BSP Tree of a map you might use the informations out of it to precalculate all edges. For us BSP-challenged Fellows I believe recording actual game playing data instead (with storing dangerous spots) could be an alternative way to show the Bots where to expect the next enemy...

--------------------------------------------------
03/10/01 at 23:50:32  Reply by: William (william@botepidemic.com)
--------------------------------------------------
The issue of revealing edges is part of a slightly bigger problem:
- determining an effective AI scan cycle
(looking back and forth along a number of points for threats, and dividing your time over the points in view depending on their relevance).

It can be done in real-time (I've got it working for sniping purposes), but I've yet to measure the CPU demands. 

For an illustration, see:
http://www.botepidemic.com/aid/cgf/shots/cgai_scanlist.jpg
(the yellow lines are added since the green in-game lines didn't show up well).

I reduced the number of spots to check by grouping spots that require more or less the same viewing direction (dot > 0.95 or so).

William




--------------------------------------------------
03/11/01 at 09:39:54  Reply by: ExecutionStyle (c_brennan@hotmail.com)
--------------------------------------------------
CF: what if I could write a tool to analyze the BSP tree and produce the edge-data in an open format data file for use by anyone's bot?  I might need help with it, but since I'm planning on doing it anyway, I'll spearhead the effort.  Once all bot developers have this tactical data to work with, we can work independently on decision models to replace FSMs. 

William: I've been thinking quite a bit about this problem you mention in the last few days.  Specifically, how to select which of the many nearby edges you are going to watch so as to maximize your strategic observation and chances of having an advantage in an encounter.  

My plan so far is to have each bot use a game-theory algorithm to decide which patches of ground it thinks it should try to occupy in preparation for an encounter.  By trying to predict the enemy's movements, and constantly refining the prediction based on observations of teammates and filtering environmental inputs such as sound and vision, it should be possible to pick a clear goal patch for a given situation.

Another main feature of my plan is to simulateously calculate goal fitness on different time and space scales.  Tactical positions can be broken into different sizes from which part of the map you want to be in, to which side of the room in that part of the map you want to be on, to which crate you want to take cover behind in that part of the room, to which side of the crate you want to observe entry points from.  As the space scale for each decision goes down, it gets easier to make the decision since there are less alternatives and parameters.  

What you end up with is a decision process that exhibits self-organizing criticality.  Don't know if you've run into this concept yet, but it relates to nearly everything in the world from sandpiles to earthquakes to the formation of the universe.  Basically, the significance and impact of an event varies inversely with the frequency of its occurrence.  Larger earthquakes are more infrequent, and in the same way in-depth tactical decisions are more infrequent.  

I'm rushing off to work on this now so sorry if I wasn't very clear

 -Carl

--------------------------------------------------
03/11/01 at 12:10:01  Reply by: William (william@botepidemic.com)
--------------------------------------------------
Carl,

personally, I would feel uncomfortable by considering so many advanced 'thinking ahead' mechanisms without performing experiments.
(I'm not saying there's something wrong with it - it's just not my way of doing things).

During a CS round, many things happen to the team balance that would affect your scanning policy. For example, with a nearby team mate, you try to scan directions your team mate doesn't scan. If you end up in a four against one situation, you organize in pairs and use speed rather than cautious scanning.
If you are in a one against four situation, you just try to get in a strong defense position that is easy to scan...

Normally, I arrive at decent solutions after trial and error (and a number of seemingly decent solutions that however don't work well when I review the recorded movie). 
I try to think ahead, and aim for some low level data structures and routines I'm likely to need, along with some good testings scenarios and logging facilities.
From then on, see what works and start improving.

See the 'grenade handling' paper at the CGF site for some unexpected issues with grenade trajectories...

In response to your post: I've laid the foundations to do per area influence maps, to draw a more hi level tactical picture. However, I haven't found the time to complete it.
Be careful in planning too much at various levels of AI. Wasn't it Moltke who stated that no plan ever survives first contact?

William

--------------------------------------------------
03/14/01 at 17:02:40  Reply by: bigjesus (holybigjesus@hotmail.com)
--------------------------------------------------
You guys think too much and type too much too just looking at this post makes me tierd LOL! But ya I am gonna have to go with count on this cause I my self have had a lot of crap with bsp poopoo... so blah!!

--------------------------------------------------
03/15/01 at 20:11:29  Reply by: ExecutionStyle (c_brennan@hotmail.com)
--------------------------------------------------
William, you're exactly correct in pointing out the inherent danger of too much planning and not enough doing.

Just last night, I was fiddling with actual bot code for the first time in ages, trying for the fun of it to degrade the bot's aim based on how fast it was moving.  Unfortunately, I'm sort of an idiot savant, so this simple calculation took me a while to nail down ;)

Still, I'm glad I haven't written a single line of code yet. I've beem able to slowly settle on the best approach to developing my bot, and I'm 90% done deciding which methods will be used to bring my beast to life.  

Unfortunately, I have nothing much more to contribute to this forum in terms of open ideas.  (I'm afraid I've gone a little too far off the beaten track as it is and I'll just have to keep my peace till I have something to show for my rantings.)  I'll still be able to help others out with code suggestions and such, as well as sticking my 3.14 cents and my nose in wherever  they fit.  

Can't wait to give something concrete to the community.  G'night for now

 -Carl




