--------------------------------------------------
Subject: USING ENTITIES!!!!!
--------------------------------------------------
03/27/01 at 21:47:22  Posted by: SLAVIK (wud@i.com.ua)
--------------------------------------------------
HI! I've posted a lot of post on that theme, but all advices, replies don't work! Here is source
(P.S. for Botman: when i am trying pev->solid = SOLID compiler tells me error)
#include        "extdll.h"
#include        "util.h"
#include        "cbase.h"
#include        "monsters.h"
#include        "talkmonster.h"
#include        "schedule.h"
#include        "items.h"

//=========================================================
// Monster's Anim Events Go Here
//=========================================================

class CGordon : public CTalkMonster
{
public:
        void Spawn( void );
        void EXPORT MyUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value );
        void Precache( void );
        void SetYawSpeed( void );
        int  Classify ( void );
        int ObjectCaps( void ) { return CTalkMonster :: ObjectCaps() | FCAP_IMPULSE_USE; }
        void HandleAnimEvent( MonsterEvent_t *pEvent );
};
LINK_ENTITY_TO_CLASS( gordon_freeman, CGordon );

//=========================================================
// Classify - indicates this monster's place in the
// relationship table.
//=========================================================
int        CGordon :: Classify ( void )
{
        return        CLASS_HUMAN_PASSIVE;
}

//=========================================================
// SetYawSpeed - allows each sequence to have a different
// turn rate associated with it.
//=========================================================

void CGordon :: SetYawSpeed ( void )
{
        int ys;

        switch ( m_Activity )
        {
        case ACT_IDLE:
        default:
                ys = 90;
        }

        pev->yaw_speed = ys;
}

//=========================================================
// HandleAnimEvent - catches the monster-specific messages
// that occur when tagged animation frames are played.
//=========================================================
void CGordon:: HandleAnimEvent( MonsterEvent_t *pEvent )
{
        switch( pEvent->event )
        {
        case 0:
        default:
                CBaseMonster::HandleAnimEvent( pEvent );
                break;
        }
}
//=========================================================
// Spawn
//=========================================================
void CGordon :: Spawn()
{
        Precache( );

        SET_MODEL(ENT(pev), "models/player.mdl");
        UTIL_SetSize(pev, VEC_HULL_MIN, VEC_HULL_MAX);

        pev->solid                        = SOLID_SLIDEBOX;
        pev->movetype                = MOVETYPE_STEP;
        m_bloodColor                = BLOOD_COLOR_RED;
        pev->health                        = 100;
        pev->view_ofs                = Vector ( 0, 0, 50 );// position of the eyes relative to monster's origin.
        m_flFieldOfView                = VIEW_FIELD_WIDE;// indicates the width of this monster's forward view cone ( as a dotproduct result )
        m_MonsterState                = MONSTERSTATE_NONE;

        MonsterInit();
        SetUse(&CGordon::Use);
}

//=========================================================
// Precache - precaches all resources this monster needs
//=========================================================
void CGordon :: Precache()
{
        PRECACHE_MODEL("models/player.mdl");
}

void CGordon :: MyUse(CBaseEntity *pActivator, CBaseEntity *pCaller, USE_TYPE useType, float value )
{
switch (useType)
 {
 case USE_ON:
  {
  ClientPrint(pev, HUD_PRINTCENTER, "You used GORDON FREEMAN...");
  }
  break;
 }  
}

--------------------------------------------------
03/28/01 at 05:39:15  Reply by: botman (botman@mailandnews.com)
--------------------------------------------------
Nevermind about the solid thing.  I just looked a CBasePlayer::Spawn() and players are also created with a SOLID_SLIDEBOX, so that's not your problem.

If you are using Microsoft Visual C++, I would recommend setting a breakpoint in the CBasePlayer::PlayerUse() function (in player.cpp) to see why your MyUse() function is not getting called.  Just single step through the code and make sure it gets to the part where it checks the ObjectCaps() of the entity.

botman

