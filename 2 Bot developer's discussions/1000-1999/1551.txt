--------------------------------------------------
Subject: bot teamplay
--------------------------------------------------
04/18/01 at 10:35:29  Posted by: impaqt (impaqt@online.no)
--------------------------------------------------
How are you guys planning on getting your bots to really use tactics and get some good teamplay, just wondering...

Here's how im planning on doing it(from another post);
QUOTE:

Ive got some plans on how to implement team strategy play too...I'm thinkin about having goal waypoints, the first goal point you put out gets the "goal1" id, the second gets "goal2"...
and then i'll have it load .cfg files for different tactics (half-life/cstrike/frontbot/tactics/de_nuke/ct/tact1.cfg)
for de_nuke this tactic's .cfg would look something like this
//de_nuke tactic number 1
goal1 = camp
goal2 = shootat
goal3 = aimat
//EOF
heres a graphical display of the tactic itself, on de_nuke
code:

------------------------------------
goal3          goal2             
                  -      goal1     
                        ---        
                                   
                                    
                                    
                          /        
                        /          
                      /            
                    /              
           ---------                
          ct start               
--------- -------------------------


this means that the bot will go into the room. fire at the box and then aim somewhere near goal3
to spot enemies....by using more advanced versions of this script i could get the bots to use real human tactics.....
Lets see what im able to do..



What do you think ?

--------------------------------------------------
04/18/01 at 12:10:43  Reply by: eLiTe (ali@elitegamer.fsnet.co.uk)
--------------------------------------------------
I think you should jsut waypoint the level normally then get the bot to remember which locations the enemy usually apears from and get it to camp looking in that direction (or just listen for approaching enemies if they are running). I have some ideas for teamplay, but they're not amazing or anything, and I'm not sure how much time I can spend on my bots at the moment

--------------------------------------------------
04/18/01 at 12:20:18  Reply by: impaqt (impaqt@online.no)
--------------------------------------------------
well, i want to recreate human clan tactics..

so if you havent already i suggest you goto the cs part of xsreality and download a demo from some great clan like team9 or vse so you can watch what kind of different tactics they use, and how they always pull them off the same way...

so a "scripted-sequence" wouldnt be too far away from the real thing.....


well, its just my twisted head anyway..i dont think i have enough time either...
but my idea isnt copyrighted so if anyone else wishes to try it then it would be really great...




--------------------------------------------------
04/18/01 at 14:47:34  Reply by: botman (botman@mailandnews.com)
--------------------------------------------------
I would think it would get rather boring if you knew ahead of time where players were going to move (i.e. if you used the same scripted sequences over and over and over).

That's one of the problems with the Floyd-Warshall path finding algorithm.  The bots always take the same path.

botman

--------------------------------------------------
04/18/01 at 17:05:26  Reply by: billybot (Nulosoft@aol.com)
--------------------------------------------------
Even with multiple scripted sequences (which would be really hard work, wouldn't it?) it will be really boring, but the main problem is that a player won't ever be members of a bot squad, (maybe with the flashpoint system..??)
btw where can I find the Floyd-Warshall pathfinding algorythm?

--------------------------------------------------
04/18/01 at 17:27:54  Reply by: eLiTe (ali@elitegamer.fsnet.co.uk)
--------------------------------------------------
It is included with the HPB template 2 and 3 - look in waypoint.cpp

It sometimes returns a value like 63358 or something (can't remember what) which means that it can't find a path from the source waypoint to the destination - make sure you check for that! It caused a few of our bots to crash when a bot tried to access waypoint 63358 (well me and DarkYouth anyway)!

--------------------------------------------------
04/19/01 at 02:47:55  Reply by: impaqt (impaqt@online.no)
--------------------------------------------------
I agree that it might be boring sometimes, but hey
cs is boring sometimes

the essence of the bot is making it play as a real clan together, adn once again i say, watch some demos and you`ll understand, its boring

but people should be able to use it for prac.

--------------------------------------------------
04/19/01 at 06:40:37  Reply by: theimann (killaruna@botepidemic.com)
--------------------------------------------------
Watching these clan demos to get some ideas for bot teamplay is a great idea!!! But since I'm not so much into CS I have to admit that I don't really know how these demos work: Is there any command that you type in the console to watch it or what do you have to do?

Tobias

--------------------------------------------------
04/19/01 at 08:27:36  Reply by: CountFloyd (countfloyd_1999@yahoo.com)
--------------------------------------------------
Demo playing isn't something special to CS, it also works in Half-Life. I think the console commands to record/play a demo were once posted here in the forum, can't quite remember them. For everybody who doesn't want to type that much, here's a demoplayer for Halflife:
http://www.geekboys.org/geekplay-cs/
(didn't try it yet, but looks nice)

--------------------------------------------------
04/19/01 at 08:28:49  Reply by: CountFloyd (countfloyd_1999@yahoo.com)
--------------------------------------------------
Btw. I fully agree with Botman that using predefined (static) scripts would be as boring as Bots always taking the same route...

--------------------------------------------------
04/19/01 at 11:25:02  Reply by: William (william@botepidemic.com)
--------------------------------------------------
I can't keep my mouth shut, so:

QUOTE:

[bots running predictable paths] is one of the problems with the Floyd-Warshall path finding algorithm.



The paths are predictable because you choose to use shortest paths, not because of the path finding. There are numerous ways to use the shortest paths presented in the Floyd computed table to get unpredictable paths. Most of these ways are more efficient than a dynamic path finding method.

QUOTE:

static scripts results in boring game play




That's solely true if your scripts specify too much detail. You can, for example, regard the CS team spawn spots as being scripted (in the map), and I don't know many people who complain about it, because the resulting game play still is unpredictable.
CGF heavily uses scripts, but the script just issues instructions to the team (patrol these three areas). Anything can happen afterwards (even boring situations :) ).

William

--------------------------------------------------
04/20/01 at 12:02:45  Reply by: impaqt (impaqt@online.no)
--------------------------------------------------
Thanks for backing me up William, phew :P

anyways, to get hl demos working all you do is load up the game, goto the console, type "playdemo x y" where x is the demo name(without .dem) and y is the speed of the playback(normal speed is 1)..
so to play a demo named clanmatch.dem :
put it in your cs dir, goto the console, type
playdemo clanmatch 1




--------------------------------------------------
04/20/01 at 14:27:03  Reply by: botman (botman@mailandnews.com)
--------------------------------------------------
"There are numerous ways to use the shortest paths presented in the Floyd computed table to get unpredictable paths."

Are any of these documented anywhere?  I spent quite a few hours trying to determine an efficient method of finding alternate "shortest" paths from point A on one side of the map to point B on the other side of the map.  The only thing I could come up with is to backtrack from B to A to find alternate routes (which didn't seem to be any better than some of the depth-first or breadth-first search methods).  Or to randomly pick points "between" A and B and compute the cost (total distance) by using this path.  Keep a list of the top 5 or 10 alternate paths and randomly choose from those.  It just wasn't obvious how to identify a point that is somewhere "between" A and B. :)

botman

--------------------------------------------------
04/21/01 at 04:21:58  Reply by: @$3.1415rin (as3.1415rin@gmx.de)
--------------------------------------------------
in my first navigation system i used backtracking. but because it computational expensive, it only worked for up to 100-150 wps, where the bot normally found 1000-2000 ways.
But I think backtracking is a good method, but u should do that on the waypoints itself, rather on some kind of segments : p.ex. hallways, open places etc. Now the problem is to find an algorithm to determine these areas. how they're connected, that can be seen from the wps, but where do they begin and end ? Has anybody an idea how to calculate it ?

--------------------------------------------------
04/21/01 at 11:32:06  Reply by: William (william@botepidemic.com)
--------------------------------------------------
Granted, there is few (if any) documentation on getting unpredictable paths (using Floyd-Warshal). The following two documents might give some insight and inspiration:
- Game Programming Gems I (the book), with Steve Rabin's and Greg Snook's articles about advanced A* uses. You should ignore the A* story (in this case), but look at how the post-process a path to get better paths.
- Formation based pathfinding for real-world vehicles also shows post-processing to get better paths (by Jim Van Verth, Red Storm - see the links at www.cgf-ai.com )

The reason I'm suggesting to work from Floyd, rather than building an 'unpredictable' path finding algorithm of your own is:
- a (Floyd) table immediately answers whether the path is feasible (but not for the red-team / blue-team doors, indeed)
- the 'unpredictable' path finder you develop yourself is likely to be predictable as well, and with less smart paths than Floyd
- starting with the Floyd shortest paths, you have nice point to vary on.


If you use a Floyd shortest path to vary on, you know the length of the path (in waypoints), each point on the path, and you know the shortest path.

You can make the path (from A to B) less predictable by picking a random waypoint near the middle of the shortest path, and cut the path in two. Then (via outgoing neighboring waypoints), pick some nearby waypoint C (likely off the path). Lookup a new path A - C, C - B, and connect them. Then test whether a waypoint has been visited twice (in which case the bot would backtrack the same deviation near C, which is stupid). If no waypoint has been visited twice, you've got a good path. You can also check for paths that get way longer. If not, try two more times and take the shortest path otherwise.

Wrt TFC team only paths: if you post-process a floyd path for inclusion of hostile-team-door-waypoints, you can simply return a 'no path available' if the path would use such a waypoint.
(Assuming there is never an alternate longer path to get at the destination).

I expect that programming variations on a Floyd path is less work, easier than trying to invent a non-predictable path finder; the latter typically performs a lot worse.

If you really need 'unpredictable' paths, then derive the path variations from the situation at hand, and use A* with a cost function taking into account the situation. (See the 'Tactical Movement Planning for Individual Combatants' paper by Doug Reece, also available via my site). 

William

--------------------------------------------------
04/21/01 at 15:38:54  Reply by: eLiTe (ali@elitegamer.fsnet.co.uk)
--------------------------------------------------
Well my system uses backtracking frm the goal and it just chooses a random path at each junction it comes to, and if the algorithm comes to a junction it has reached before it will go to the previous junction and carry on looking for more paths. In this way it will go through all the waypoints and give an unpredictable path for the bot (very rarely will a human choose the shortest path).

--------------------------------------------------
04/21/01 at 23:44:05  Reply by: William (william@botepidemic.com)
--------------------------------------------------
QUOTE:

In this way it will go through all the waypoints and give an unpredictable path for the bot ...



Though the backtracking you describe doesn't often go through all the waypoints, this solution nevertheless is as expensive as pathfinding can get.
It makes for a great candidate to reduce CPU load.

It also seems hard to use for team situations: do the second, third, ... teammember always pick other paths.
Same for short paths: do you, in a three waypoint path, really go out of your way not to visit the second waypoint?
The algorithm you describe doesn't check for neither prevent against "silly" paths.

QUOTE:

... (very rarely will a human choose the shortest path). 



Bull. Humans tend to pick shortest paths most of the time, and especially for short distances. They don't pick shortest paths when (almost) in combat (due to the need for cover/concealment); however, such a situation calls for a path finding solution taking into account threats and cover, not so much random paths for unpredictability. 

William


--------------------------------------------------
04/22/01 at 08:51:45  Reply by: eLiTe (ali@elitegamer.fsnet.co.uk)
--------------------------------------------------
Well actually I drew out an example set of waypoints on paper and went round them all and the system I have DOES check every junction, althought I didn't explain it very well above.

Also a human may take a SHORT path but they will defnitely not always take the shortest path, they will at least have some variation. My bots won't go all the way round the level to reach a goal if there are a small number of junctions. They may take a slightly round about path but I still consider that to give a human effect of deciding to take a completely different path to throw off the enemy. When I have created a shortest path algorithm then the bots can start planning their routes more carefully, but I think that the system I use still gives very good results, as it basically does the same as the NNBot system (and I have always liked NNBot the best since I first played it)

