--------------------------------------------------
Subject: Something big on the horizon
--------------------------------------------------
11/14/03 at 03:18:21  Posted by: PM (pm@racc-ai.com)
--------------------------------------------------
The United Admins association has come up with a new project, which looks quite promising for third party coders. Have a look at forums.unitedadmins.com in the "Titan" section, and read the threads here.

http://www.unitedadmins.com/titan-framework.php

http://forums.unitedadmins.com/index.php?showtopic=21192

http://forums.unitedadmins.com/index.php?showtopic=21070


--------------------------------------------------
11/14/03 at 05:46:15  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
They started this almost a year ago.

Alfred (at Valve) contacted me when they were beginning to design what this "metamod" like replacement was need to do.  Everybody had a different opinion about what types of plugins would need to be available (mostly from the server operators point of view because most of the people on UA run servers).

The UA guys wanted to have a generic system that would allow any plugin to run on any game (which is not technically possible since each engine is unique and each MOD is unique).  They seemed to be stuck in the mindset that EVERY game has some sort of "health" and every game has some sort of "weapon" and every game allowed people to be kicked from servers, etc.  These things are true for many games, but they aren't true for all games and those items aren't represented the same way in 2 different engines.

About the best thing you could do would be to some up with some fairly generic scripting system that would call an engine specific API to perform common functions (or return meaningful error messages when those behaviors weren't available in certain engines and/or MODs).

I think after the first month or so of discussion, many people who were interested in trying to make something like this work, gave up on it because it was simpler to create a plugin system (like metamod) that was specifically geared toward each engine.

I believe this project is pretty much dead.

botman

--------------------------------------------------
11/14/03 at 09:08:42  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
QUOTE:
Alfred (at Valve) contacted me when they were beginning to design what this "metamod" like replacement was need to do.  Everybody had a different opinion about what types of plugins would need to be available (mostly from the server operators point of view because most of the people on UA run servers).



Yes, I smell a furious will from some of them to do part of the stuff on the game client as well - which would IMO be quite out of the point.

QUOTE:
The UA guys wanted to have a generic system that would allow any plugin to run on any game (which is not technically possible since each engine is unique and each MOD is unique).  They seemed to be stuck in the mindset that EVERY game has some sort of "health" and every game has some sort of "weapon" and every game allowed people to be kicked from servers, etc.  These things are true for many games, but they aren't true for all games and those items aren't represented the same way in 2 different engines.


I *completely* agree with you, that's why their project appeared to me as very ambitious. From my own little experience all I could see useful is a working, robust and also credible to third party coders and game developers engine abstraction interface, with a standardized API. This is in my opinion the first thing they should do, before envisioning any further. I've posted my point there, I hope to get some answer on this.

QUOTE:
I think after the first month or so of discussion, many people who were interested in trying to make something like this work, gave up on it because it was simpler to create a plugin system (like metamod) that was specifically geared toward each engine.
I believe this project is pretty much dead.



I didn't knew this project was that old, anyway I beg to differ: it looks like it's not dead at all. The most recent news on the UA server states that the project is progressing "at full steam", and that they're already a good dozen experienced coders committed to it. It would be a shame to waste such an amount of time, code and intelligence on such a thing would it be doomed to no avail, that's why I still dare to think they might come up with something good, after all.

Any comments, others ?


[modified on 11/14/03 at 09:08:42]
--------------------------------------------------
11/15/03 at 07:17:21  Reply by: JZ (maizenkor@wanadoo.fr)
--------------------------------------------------
Damn I typed a long explanation and have lost everything LOL. 

Well I'll be short. I agree with botman.

The problem: "Plugins can be Re-Used on Multiple Game Engines (1:n)", which means problems with designing the C/GD part.

If they stick to this like mad their project will not complete.
If they loosen it a bit their api will not have any advantage over engine specific existing ones, offering only a few functionalities.

I wish them good luck :-)

--------------------------------------------------
11/15/03 at 08:30:05  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
perhaps an ambitious thing for BU? :)

--------------------------------------------------
11/15/03 at 09:21:11  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
Indeed Stefan, that's why it would be good if you checked our BSCW server more often :)

BTW we won't wait for the website, the BU forums will be put up very soon now. Perhaps this week. Prepare for the database migration.


--------------------------------------------------
11/15/03 at 10:14:04  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
darn, thats what i forgot! After reinstalling, i lost the link to BSCW... :( perhaps you can mail me that one? :) 

pitty we won't wait for it, well, got to read that myself i suppose. :)

--------------------------------------------------
11/15/03 at 17:04:34  Reply by: botmeister (meister@telus.net)
--------------------------------------------------
Titan is certainly a huge effort, and it may even be impractical, but I think it is possible to do in theory, and it may provide some value.

Take for example metamod which serves as a standard (but limited) interface into HL based games. You could create a "TITAN" metamod that attaches to the "native" metamod. The titan metamod would abstract all native structures and function calls into universal versions. 

From there you could create another native version of metamod that attaches to (for example) UT. Despite the differences between HL and UT, you'd probably be able to abstract at least some of the two into titan. Whatever does not fit, would either have to be dropped (from both or one or the other), or some mechanism could be instated that simulates the function (or structure).

You could then repeat this procedure for as many games as you want.

Whatever does not fit and is left out, could be made accessable directly through the native metamod. In otherwords, a plugin mod may choose to bypass titan and directly use some of the native function calls and structures. This would be similar to, for example, writing C++ code that uses non standard function calls provided by a specific compiler. The disadvantage will be that your code (or plugin) won't be portable to other compilers (or game engines) without modification.

The end result will likely be a system that gives you some form of standard API access, but it may be very limited if the differneces between game engines is very high. 

I suspect many plugins would have to make use of the direct native functions and structures to get anything significant done. That would not necessarily negate the value of titan assuming enough is compatible, which could allow protability across game engines with only a small amount of modifications -  like you'd get by using proprietory C++ compiler functions for you code, your code won't be 100% portable, but it may be 80% protable, or even only 50%, which is still a lot better than 0%.




--------------------------------------------------
11/16/03 at 02:56:21  Reply by: JZ (maizenkor@wanadoo.fr)
--------------------------------------------------
Yes but it's not like there was nothing and Titan would bring something new. Server admin scripts and plugins already exist. 

What's the point of learning something new that pretend to be portable but in fact is not, and you'll have to write special code for each plaftorm(game engine)? Server admin tools already exist and works, I don't see the point of this project if they can't achieve 100% portability with 100% of the functionality. 

Take the example of Java. Who would prefer Java over plaftorm specific languages if Java had holes in his API support and requiere you to write platform specific code to fill the holes? Or a Java that is so limited you can only display buttons and write text.

That's why I wish them good luck they'll need it :-)

--------------------------------------------------
11/16/03 at 03:21:37  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
I don't think it is impossible to write an API that could work with multiple engines for bots.

Each function should work even, but some would simply return no value. Most stuff is available in most engines. Writing bots will probably be done in Quake like engines (quake 1 , 2, 3, Half-Life, Unreal Tournament), etc. So i don't see any trouble at all. The only thing you need is a good knowledge of all engine differences and make sure the api works on all engines ;)

--------------------------------------------------
11/16/03 at 04:10:48  Reply by: JZ (maizenkor@wanadoo.fr)
--------------------------------------------------
Wait and see. I'm pretty pessimistic about this project plus I don't see the point. I don't want to spoil the fun but I bet they'll either just give up at some point just like so many ambitious free/open projects, or make so many steps backward from their original ambitious goals this will give some just uninteresting to develop on and people will say "so what?".
:-/

--------------------------------------------------
11/16/03 at 07:15:24  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
No, no, the goals of the projects are quite what they are: 100% portability of plugins, whatever the game engine and the operating system.

This is doable.

If the abstraction is to be made at a sufficiently high level, engines aren't that different. They all send textured polygons to the video card, some of them belong to static objects (the "world"), some of them belong to interactive ones (the "entities"), which entities have certain properties which can be abstracted as well. They all feature methods to test the visibility between point A and point B. They all know how to simulate the emitting of sounds at a particular location in the world, and make its intensity decrease with distance. At some point, one could say they all provide players with VISUAL and AUDITIVE means to represent the world, and in this sense one could say they are all abstractable somehow. Of course, it's not that simple, but it's how it is meant to be thought of in theory.

It is NOT a blind engine function address mapping, but indeed a bunch of routines that standardize the methods. There may be, on some engines, 5 engine function calls needed to emulate what would on another one require 2 function calls ; like for example, a function that will return a pointer to the (abstracted) texture data that is applied to certain (abstracted) polygons. Or a function that will return the "health" (that is, the variable of which depends the life or death) of the entity that a player is controlling. On some games, the "health" will be just one variable and will range from 0 to 100, on others, the "health" will be a set of several, with different ranges and different meanings. The driver will then need to interpret them to decide whether the player is alive or not, and if he is, how "well" he is alive.

This is rather similar to human reasoning, after all. All this abstraction is about is interpreting the state of the game. Do you see what I mean ?


[modified on 11/16/03 at 07:15:24]
--------------------------------------------------
11/16/03 at 08:36:17  Reply by: JZ (maizenkor@wanadoo.fr)
--------------------------------------------------
Yes I understand. What you describe is retreiving data from the engine into something generic to engines. There's no (little) problem in this way. (N engines->Titan->1 plugin). You can always take different things and abstract into something more generic. The other way round is the problem (1 plugin->Titan->N engines). Making something generic into different concrete things. That's a problem hard enough when you design the whole software in OOP, so even more when you are only allowed to change a part of it. Don't forget the Titan guys have no way to change the engines. Just look at all the work needed by third party developpers when Valve decide to change some headers in their SDK, and this is just one engine.

I'll be a bit more concrete with an example.
For instance the concept "health". In some games you have just health; in others health+armor; in others some item might add heatlh, or armor, or there are no item like this; in others you have no heatlh but "lives"; in others you have stamina, in others not; in some engines falling gets you damaged, in others not. In the near future maybe FPS will get more realistic by adding localized health (arms, chest, head...) like RPG do. Just think about the number of possibilites for this simple concept as "health". How can you handle all the possible actions (plugin->titan->engine) in a general API that will not endup with many holes, or an API implementation that will rescrict your possibilities by taking arbitrary actions upon a simplified "health" concept.
Eg:
If it has holes the so-called generic scripts will be no generic at all but endup with things like:
function Slap(player p, int howMuch)
{
  if (game.hasArmor()&& !game.hasBodyPartsHealth())
  {
    p.looseLife(howMuch/2);
    p.looseArmor(howMuch/2);
  }
  else if (game.hasStamina())...
  else if (game.hasBodyPartsHealth())
  {
    p.looseBodyPartLife(game.BODY_HEAD);
    ...
  ...
}
instead of the theorical:
function Slap(player p, int howMuch)
{
  p.looseHealth(howMuch);
  ...
}
If it has no holes and you can write the theorical function above, its Titan Game Driver designers that will arbitrary decide what "loosing health" means. It might make pluggin designer happy, or it might not. IMHO most designers will prefer have more control on whats going on than relying on Titan GD arbitrary decisions.

And then for some reasons some engines will use messages a la HalfLife; others will need you write subclasses of their hierarchy; others work only with callbacks...
Titan will have to find a way to fit all this diffferent implementations and design philosophy into a common API.

I seriously see tons of problems ahead and from what I read on their forum it's not that easy for them.
Well I didn't want to write something long but well. :-)

--------------------------------------------------
11/16/03 at 09:23:04  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
Ah yes, I see your point now.

Well if I wanted to nag, I'd say this problem only concerns server admin plugins. Not bots, since bots don't take arbitrary actions on game structures ; the bot's "inputs" being exactly the same as those of a player. Hehe. I guess only monitoring / stats plugins would be fully portable, while the other way around would be problematic, as you say... Unless they took the whole concept of "slapping players" as part of their API. Seriously, I'd laugh hard if they did so ;D

I have never been fond of these plugins which directly alter the game data, anyway. ;D


--------------------------------------------------
11/16/03 at 10:14:16  Reply by: JZ (maizenkor@wanadoo.fr)
--------------------------------------------------
Slapping is a typical functionality of a server plugin. There are admin plugin that allow you to slap players, punish for tk and things like that. The pseudo-code I write is a plugin using Titan API, not the code of a Titan GD. This is the kind of plugin they are supposed to support.

Speaking of bots, in-door FPS mostly(all? I know only Cube which dont but its a free "toy" engine) use BSP, out-door FPS use another representation (landscape quadtree or whatever), and some FPS mixes both with a transition between BSP/landscape. So I'm not sure it's possible to write a generic bot working with all this as well. 
In the end it all comes to what engines they will choose to support and what engines they will discard.

--------------------------------------------------
11/16/03 at 12:20:43  Reply by: botmeister (meister@telus.net)
--------------------------------------------------
I have to agree with JZ that Titan may be impractical, but I also agree with PM that it is possible to buiuld Titan. 

The number of possibilities for abstraction are seemingly impossible to generalize as a standard, even for bots, but it can in theory be done given enough time and resources. Take for example the introduction of one of the most bizarre entities in CS - the shield.  I know that a few other games have something like a sheild, but the ones that do have shields that operate very differently than the CS shield. No matter, you could generalize a "titan shield" from all other shields. For example, some shields may have health, others do not (like the CS shield). Such a situation is easy to deal with by having a health for the Titan Shield, but if your shield is a CS shield, its health always remains at 100%. Other games will see the health decrease as they deteriorate. 

To see if Titan is possible or not, I challange anyone here to provide us with an example that cannot be abstracted and generalized.


