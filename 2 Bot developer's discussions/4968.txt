--------------------------------------------------
Subject: Do you actually think before you code?
--------------------------------------------------
11/20/03 at 07:17:05  Posted by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
I think this is pretty important to bot coding. I evaluated my years programming on the bot lately and i found i was remarkibly unorganized. 

I bet most bot coders just start playing around the first time. After some -restarts- you get the serious job going. But even then you don't have a real logic. For example, you still use botmans template because you understand the template, you _THINK_ you know the logic...

Recently i totally converted the bot_t structure into a class, i introduced my own NodeMachine class, i am busy writing a Game class which should handle stuff that are 'globally' initialized. Things get more organized this way, because i force them to.

Using private and public variables you have the advantage of not messing up ;)

Besides the coding part, do you ever think off a logic when coding your bot? I found myself most of the time fixing code by actually 'forcing' to override previous code. As long as it worked, it worked... but i was not really happy about it.

At my site i am offering a 'project concept' document now, unfinished, but its growing as i code and as i 'rewrite'. 

Lemme hear your thoughts, your experiences, and most of all i hope this will end up to be a good source of information for those who tend to reinvent the wheel ;)

--------------------------------------------------
11/20/03 at 09:43:00  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
To answer the question in the title: no

QUOTE:
I evaluated my years programming on the bot lately and i found i was remarkibly unorganized.


Well to notice it is already some form of organization ;D

QUOTE:
I bet most bot coders just start playing around the first time. After some -restarts- you get the serious job going. But even then you don't have a real logic.


Yes, as long as you don't OWN the code. Meaning, that you've read and read it over, that you've come to the point where you understand what's the purpose of every single variable, and that you agreed with it. At this point, you've appropriated yourself the code. You've made it yours.

QUOTE:
Besides the coding part, do you ever think off a logic when coding your bot?


Yes, I do, but not too much. I get a general sense of the direction, and then I put my two hands on the keyboard and I type these two magic words:

typedef struct
{

and then, everything comes naturally. Ideas pop up in my mind like frying popcorn and I wish I had twice as much fingers as the ten I have to keep up with the flow. Never tried to code with my feet, but one day I might give it a try ;D


QUOTE:
I found myself most of the time fixing code by actually 'forcing' to override previous code. As long as it worked, it worked... but i was not really happy about it.


well on the contrary, this is a thing I .n .e .v .e .r do, and I'm strongly decided not to have to do it ever ! I prefer missing all the deadlines and spend 2 years where others spend 3 months rather than "do patching".

QUOTE:

At my site i am offering a 'project concept' document now, unfinished, but its growing as i code and as i 'rewrite'.


This is a good idea, if you are disciplined enough to do this, go for it! For myself, I just can't. It's that I'm terrified by the time I would waste on writing such a thing at the expense of all the code lines that I could have written in the meantime. I try to compensate with inline comments... but it's not that not following guidelines laid by a real document make my code a real mess, on the contrary I believe it's well self-contained. I use explicit variable names and I have a "literal" habit of writing, that's to say, I write the C code so that when I read it in my head, it sounds like a real English sentence ;D like in

   if (server.does_footsteps && IsOnFloor (pPlayer) && !IsFlying (pPlayer) && (abs (VelocityOf (pPlayer)) != 0))

   "If this server does footstep sounds AND player is on the floor AND player is NOT flying AND the absolute velocity of player is NOT zero..."
   ... then check to see if we need to play a footstep sound :)

That's the main reason why I'm not fond at all of when the code is written using unpronouncable syntax rules, like rgszString, pfnVecSomething, uiSomeValue and m_irszgfluWhatever. Already tried to see how it sounds? 

   if (FStrEq (rgszString, "some_value"))
   if err... *cough* "feuhstreck' rhaagheuseezed' string" is some value...
   omg. suicide ;D


--------------------------------------------------
11/20/03 at 09:57:07  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
I know what you mean when coding and 'popping in your mind'...

I have that too, when i want something in, i already see the lines in my head. I just have to type them. Only when they don't work as i thought, i am in trouble :D hey, do i see some cognitive stuff around here? ;)

Writing a document may be time consuming, but it will already filter out major bugs you might add to your game.

You can get all these wild ideas when using classes, you can organize everything from top to bottm, but then you have to ask yourself when a class is really needed for some things, and then not. If you don't think about this and just put everything in once "game class" you practicly just 'renamed the entire code'... :)

I hope by distributing my document (which is updated every now and then) to involve people more in the development progress, or atleast make them aware off what you have to think off when coding a bot.

So, besides its handy for myself, its even informative for 'my users' ;) I even give them the 'option' to give comments on it which i might use.

Btw, my code is always 'logical' , actually i find it also more like a 'normal language';)
Btw, i just love my new BotThink() function :)
code:

// GENERAL BOT THINK:
void BotThink( cBot *pBot )
{ 
   // STEP 1: Update status
   pBot->UpdateStatus();   
   // STEP 2: Think
   pBot->Think();
   // STEP 3: Act
   pBot->Act(); // Bot act

   // PASS THROUGH ENGINE
   g_engfuncs.pfnRunPlayerMove( pBot->pEdict, pBot->vecMoveAngles, pBot->f_move_speed,
                                pBot->f_strafe_speed, 0, pBot->pEdict->v.button, 0, pBot->msecval);
   return;
}



/offtopic
One thing i found so cool about the Matrix: Revolutions:
"Choice, is nothing but an illusion, instead of thinking what to do you should try to understand the WHY rather then the HOW" :)



[modified on 11/20/03 at 09:57:07]
--------------------------------------------------
11/20/03 at 10:44:49  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
About your BotThink, "sense"-"think"-"act", I'm glad to see my template has finally been useful for somebody at least ;)


--------------------------------------------------
11/20/03 at 10:58:25  Reply by: Cheesemonster!!! (cheeseh(at)rcbot(dot)net)
--------------------------------------------------
of course, you gotta think about complicated things you want to code, I have to :P

I'm already using a globals classs with bots held in it and even net messages that can be caught, clients in the server etc :p.Ie. I made seperate classes for these as well, their not OO'd at all, never really found any useful approach to make them OO'd ...

--------------------------------------------------
11/20/03 at 12:43:08  Reply by: koraX (jowag@szm.sk)
--------------------------------------------------
QUOTE:
Recently i totally converted the bot_t structure into a class, i introduced my own NodeMachine class, i am busy writing a Game class which should handle stuff that are 'globally' initialized. Things get more organized this way, because i force them to.

Using private and public variables you have the advantage of not messing up ;)




Oh I see somebody needs my totally converted bot src to OO'd C++ (well not totally :) It is a new bot, not using botman's variables (only a little))

http://neuron.tuke.sk/~wagner/kxbot.zip
I am putting it here only cause it may help you If you are trying to convert to C++.

And I hate global variables :)

[modified on 11/20/03 at 12:43:08]
--------------------------------------------------
11/20/03 at 15:49:55  Reply by: Cheesemonster!!! (cheeseh(at)rcbot(dot)net)
--------------------------------------------------
QUOTE:

And I hate global variables :)




yeah but unfortunately it's pretty difficult to  make a bot without them, excluding the use of static variables.

--------------------------------------------------
11/21/03 at 07:00:49  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
QUOTE:
And I hate global variables :)


put 'em all into structures!!!
typedef struct 0wns j00


--------------------------------------------------
11/21/03 at 07:39:45  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
Classes own Typedef structs :P

Another promotion of my own code, when a bot is in combat state (in my theory, i only have 2 states: NON combat and COMBAT)

code:

//... here above a few lines about clearing pointers when enemy died :D
    // STEP 1: Pick best weapon to fight with
    PickBestWeapon();
    // STEP 2: Decide how to move to make us a harder target
    FightEnemy();
    // STEP 3: Aim at enemy (skill-based)
    AimAtEnemy();
    // STEP 4: Fire!
    FireWeapon();    




--------------------------------------------------
11/21/03 at 10:29:55  Reply by: Cheesemonster!!! (cheeseh(at)rcbot(dot)net)
--------------------------------------------------
or use task stacks which do all these whenever the bot needs to do them :p

But I've never needed aiming done with tasks especially when aiming at enemies, all that is handled else where...

--------------------------------------------------
11/21/03 at 13:20:17  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
I dump stacked tasks, in theory great, in practice unnoticable and not as usable as it looks like. ;)

--------------------------------------------------
11/21/03 at 13:38:27  Reply by: @$3.1415rin (johannes@_-removeifnotavirus-_lampel.net)
--------------------------------------------------
yes, with first joebot is was more hacking than coding, yeah, here too. but I hadnt a big plan what I wanted to do, I was rather surprised that the bot became popular.

the new joebot is better designed, I almost spent 2 month on thinking about the design before even starting to code. the problem now is that I cannot allow myself to hack something, cause I know it would stay for longer ( often ), therewith destroying parts of the design. I also use now more pure C++, classes, inheritance, polymorphisms etc, that's making a lot of things more easy, or let's say easier to use. and the organization of the data is more clear, the code get's more modular, more independant of the other stuff.

btw, my think function :
code:

bool CBaseBot ::think(void){
      PROFILE("think");
      // return true if the bot 'thought' this time.

      m_pPlayer->getEntity()->v.flags|=FL_FAKECLIENT;

      if(m_fNextThink > g_pGame->getTime()){
            m_pAction->move();
            return false;
      }
      {
      PROFILE("realthink");

      menu();

      if(checkDeath()){            // if it's dead ... call necessary functions and get back
            m_pAction->move();
            m_fNextThink = g_pGame->getTime() + .1f;
            return false;
      }

      m_pAction->releaseButton();
      m_pAction->setStrafe(0);

      m_pPerception->run();

      callBehaviours();

      m_pAction->move();
      m_fNextThink = g_pGame->getTime()+.1f;

      }
      return true;
}


--------------------------------------------------
11/22/03 at 01:16:49  Reply by: stefanhendriks (stefan@counter-strike.net)
--------------------------------------------------
Aspirin, i can read it!!! Superb! :) 

Seriously, it looks good, i can understand what you are doing, if i had a chance to look to your 'project design document' i could also understand the thoughts behind it. In my opinion you cover more 'sub functions'. The principle Pierre talked about "Sense, think, act" is actually the most logical. Its what everybody does, even now, you sense (read), think (about what you read), act (you will probably write back) to me based upon what i've said.

I knew vaguely that Pierre also built this in, but i was so clever to figure it out myself ;) Ahum. Right. I also use states;

I have a very simple state 'machine' built in the code:

code:

void cBot::Think()
{
 if (not in combat)
 {
   FindEnemy();
   HandleObjectives();  
 }
 else
 {
  // You have seen this function somewhere above ...
  Combat();
 }
 Move(); // create + walk paths to any Goal given
}



In this i force the bot to think about one thing a time. Meaning, you either think of enemies, and if not you think about goals. Its basic, but it covers everything. What you think off when not thinking off enemies is a different story, you have to cut down the amount of states so it keeps readable :)

Anyway, lots of this is described in the document, i will add a link to it on my website today :)

--------------------------------------------------
11/22/03 at 02:47:02  Reply by: @$3.1415rin (johannes@_-removeifnotavirus-_lampel.net)
--------------------------------------------------
maybe I should search for the design documents and then scan them and upload them. As you might have guessed, there are a lot of tobias ideas :)
or I write a little report, like pierre did with his bsp stuff. that'd be a reason to begin learning TeX, gotta do that anyway for university.

I don't really use states for the behaviours, I rather use priorities. if a behaviour wants to do something, it creates a goal with the type of wanted action and a priority. then the best combination is selected and executed.

[modified on 11/22/03 at 02:47:02]
--------------------------------------------------
11/22/03 at 15:46:01  Reply by: Cheesemonster!!! (cheeseh(at)rcbot(dot)net)
--------------------------------------------------
heck my think functions are huge, much bigger than your lot! 8)

omg TeX!? you mean 'LaTeX' ? ??? or something...

--------------------------------------------------
11/22/03 at 19:58:22  Reply by: PM (pm@racc-ai.com)
--------------------------------------------------
LaTeX is in fact an implementation of TeX.

TeX is a document formatting language, much like PDF or HTML. It's long known in the UNIX world, and many printed books out there have had their template formatted in TeX beforehand.

But don't worry, Joe has always the curious habit to scare us off with his overcomplicated weirdosities ;D


