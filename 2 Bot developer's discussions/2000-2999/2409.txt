--------------------------------------------------
Subject: pathfinder v0.9 released
--------------------------------------------------
10/31/01 at 05:12:05  Posted by: mSparks (mark.parker@btinternet.com)
--------------------------------------------------
k, I've uploaded what should be a working pathfinder project with source to anyone who wants it
http://www.btinternet.com/~alasbot/pathfinder.zip
do what you like with it (under the terms of the GPL license)
If you are a GPL violator (such as the f##kwit group German-Coders) you may not download or use this file in anyway, get a life, grow up, and realise what GPL is all about.
big shout out to vasily. top bloke.
please note, you must have open GL installed on your system for the executable file to run. 

--------------------------------------------------
11/01/01 at 05:35:53  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
I couldn't remember if I ever posted my simple little Floyd-Warshall C program or not, so here it is...
code:
#include <stdio.h>

/* here's what the graph looks like (numbers in parenthesis are distance)...

        (50)      (40)
     0 ------> 1 ------> 2 ---\
               |        ^ |    \
               |        | |     \(50)
               |        | |(45)  \
                \   (45)| |       \
             (30)\      | |        |
                  \     | V        V
                   \-->  3 ------> 4 ------> 5
                            (55)      (35)

Note that the only 2-way path is from 2 to 3 (and 3 to 2).
All other paths are one-way paths.

Here's the paths and distances:

 0 -----> 1  (distance = 50 units)
 1 -----> 2  (distance = 40 units)
 1 -----> 3  (distance = 30 units)
 2 -----> 3  (distance = 45 units)
 2 -----> 4  (distance = 50 units)
 3 -----> 2  (distance = 45 units)
 3 -----> 4  (distance = 55 units)
 4 -----> 5  (distance = 35 units)

All paths which aren't possible are indicated by -1 in the shortest_path table

The shortest_path array is a 2 dimensional array of all waypoints (i.e. if
there are 50 waypoints then the table will be 50 X 50 in size.  The rows
(running down the table) indicate the starting index (0 to N) and the columns
(running across the table) indicate the ending index.  So if you wanted to 
know the distance between waypoint 37 and waypoint 42 you would look at
shortest_path[37][42].  If you wanted to know the distance between waypoints
42 and 37, you would look at shortest_path[42][37].  NOTE!, these 2 DO NOT
HAVE TO BE THE SAME!!!  One way paths may mean that shortest_path[37][42]
is 150 units and shortest_path[42][37] is -1 (indicating you can't go that
way!!!)
                             
*/

#define MAX 6

int shortest_path[MAX][MAX] = {
   { 0, 50, -1, -1, -1, -1},
   {-1,  0, 40, 30, -1, -1},
   {-1, -1,  0, 45, 50, -1},
   {-1, -1, 45,  0, 55, -1},
   {-1, -1, -1, -1,  0, 35},
   {-1, -1, -1, -1, -1,  0}
};


int from_to[MAX][MAX];

void floyd(void)
{
   int x, y, z;
   int changed = 1;
   int distance;

   for (y=0; y < MAX; y++)
   {
      for (z=0; z < MAX; z++)
      {
         from_to[y][z] = z;
      }
   }

   while (changed)
   {
      changed = 0;

      for (x=0; x < MAX; x++)
      {
         for (y=0; y < MAX; y++)
         {
            for (z=0; z < MAX; z++)
            {
               if ((shortest_path[y][x] == -1) || (shortest_path[x][z] == -1))
                  continue;

               distance = shortest_path[y][x] + shortest_path[x][z];

               if ((distance < shortest_path[y][z]) ||
                   (shortest_path[y][z] == -1))
               {
                  shortest_path[y][z] = distance;
                  from_to[y][z] = from_to[y][x];
                  changed = 1;
               }
            }
         }
      }
   }
}

void main(void)
{
   int a, b;
   char buffer[20];

   // run Floyd-Warshall algorithm on the shortest_path table...
   floyd();

   // initialize any unreachable paths based on shortest_path table...
   for (a=0; a < MAX; a++)
   {
      for (b=0; b < MAX; b++)
      {
         if (shortest_path[a][b] == -1)
            from_to[a][b] = -1;
      }
   }

   printf("shortest_path:\n");
   for (a=0; a < MAX; a++)
   {
      for (b=0; b < MAX; b++)
        printf("%5d,", shortest_path[a][b]);
      printf("\n");
   }
   printf("\n");

   printf("from_to:\n");
   for (a=0; a < MAX; a++)
   {
      for (b=0; b < MAX; b++)
        printf("%2d,", from_to[a][b]);
      printf("\n");
   }
   printf("\n");

   printf("enter start node (0-5):");
   gets(buffer);
   a = atoi(buffer);

   printf("\nenter end node (0-5):");
   gets(buffer);
   b = atoi(buffer);

   if (shortest_path[a][b] != -1)
   {
      printf("\n\nShortest path from %d to %d is:\n", a, b);

      while (a != b)
      {
         printf("from %d goto %d (total distance remaining=%d)\n",
            a, from_to[a][b], shortest_path[a][b]);
         a = from_to[a][b];
      }
   }
   else
      printf("You can't get from %d to %d!\n", a, b);
}

Just cut-and-paste then use your favorite C compiler to build the executable.  What could be easier?

It'll help someone understand how to use the Floyd code included in the HPB bot template source.

botman

--------------------------------------------------
11/01/01 at 06:07:47  Reply by: Onslaught (None)
--------------------------------------------------
i had to add this line to make it work with MSVC++ 6.0:

#include <stdlib.h>

the function atoi() is defined in here

--------------------------------------------------
11/01/01 at 06:31:44  Reply by: Onslaught (None)
--------------------------------------------------
so what the WaypointRouteInit function does is to generate the shortest_path (pShortestPath in the HPB_Source) table?

--------------------------------------------------
11/01/01 at 08:15:02  Reply by: botman (botman@planethalflife.com)
--------------------------------------------------
If you look at the WaypointRouteInit() function in the HPB bot template source code you will see then following...

1) If the .wp1 file exists, the "shortest_path" array is allocated (using malloc), and then path indexes are read in from the .wp1 file (setting "num_items"), then the "from_to" array is read in (setting "num_items") from the .wp1 file.

2) If the .wp1 file does not exist, the "shortest_path" and "from_to" array are allocated and initialized with path and distance information, then it runs WaypointFloyds() on these arrays to set up the Floyd-Warshall matrix.  This data is then written to the .wp1 file so that it can be quickly loaded the next time this map is used (instead of having to run the WaypointFloyds() function on that exact same data again).

botman

