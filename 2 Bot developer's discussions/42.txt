--------------------------------------------------
Subject: Getting started (with bots, not C++)
--------------------------------------------------
08/30/00 at 03:55:15  Posted by: ~ADR (~adr@post.com)
--------------------------------------------------
I've done the standard stuff so far - 3 stage zoom, smoke appears when a bullet ricochets, giving the hand-gun a laser sight etc... but it's only good fun for a few minutes. I was thinking that it's pointless me trying to code a new weapon or entity because I can't model, map or texture. I think the only coding route left is a bot. I know C++ at an elementory level, I'm getting used to the SDK but I'm just wondering; How difficult is it to code a bot? Forgetting about the coding specifics for the moment, if you look at it as a logical problem then how difficult is it? I've never tried any sort of AI programming before (except prolog, damn those compulsory degree modules!) so I just want to know if I should invest some time....

I can imagine how cool it would be to have your own little bot running around, getting stuck in doors etc, but it could be one of those things which is just out of my programming reach.

Thanks,

Adrian

--------------------------------------------------
08/30/00 at 05:35:18  Reply by: William (william@botepidemic.com)
--------------------------------------------------
Hi Adrian,

The short answer is: yes, you seem to be capable of getting a bot up and running (and stuck).
Given useful (sample) source code available (from Botman), and with your background (getting programming degrees, editing the SDK), you shouldn't have much troubles expanding the bot by trial-and-error.

The long answer is: it depends on the 'quality of the AI' you want to achieve. Simple (as in "stupid" :) ) AI is easy, and each improvement beyond that is incrementally harder (more work, more complex).

Why incrementally harder? Feature interaction. Just about every serious extension to the AI will impact other parts of the AI to the degree you want to reorganize it. 

Example: adding the feature "hand grenades" to one of today's CS bots will (or should) require changes to:
- enemy position prediction: hand grenades are pretty useful to target (presumed) enemies you cannot see -> you need to remember and predict enemy positions even after you've lost sight of them
- vision (the bot should not only look for enemies, but also for friendly and enemy hand grenades flying around - it's kinda unrealistic if they automatically know about and avoid grenades)
- environment tracking: it doesn't matter where the grenade is flying, it matter where's he going to land -> the AI should track and predict grenades it observes
- movement / hazard avoidance: in addition to avoiding obstacles, the bot should avoid locations nearby predicted grenade positions

I could go on about the interaction with hostages, team mates, communication protocols with teammates before throwing the grenade, determining whether the destination is a good one to use grenades, ammo management, CPU load, ...

Currently, I'm fighting just one of these battles with the organization of my AI - I didn't correctly foresee all these consequences, and have to rearrange and redesign things (which is really fun as well). 

William



--------------------------------------------------
08/30/00 at 06:25:04  Reply by: ~ADR (~adr@post.com)
--------------------------------------------------
Wow. Thanks for the comprehensive reply. I understand the potential issues involved with programming AI, I just always like to get stuff clear before I sit down, crack my knuckles and start typing.  Don't think that I'm some sort of bjarne stroustrup (or whatever he's called) - I've only just finished my first year of Soft. Eng. in C++. It should still give me a head start though :)

To start off with I'll just be making a bot for regular ol' halflife. I don't think I'd be able to cope with CS/TFC yet. I want to get into bot programming because IMHO it's one of the most rewarding types of coding. I can only imagine what it'd be like to create something which would NAVIGATE a level by itself. I'll admit, FoV, hearing, spacial awareness and such sound incredibly difficult to code, but ultimately satifying.

Adrian

--------------------------------------------------
08/30/00 at 08:16:59  Reply by: William (william@botepidemic.com)
--------------------------------------------------
:)

Just don't forget to browse through as many AI implementations as possible, before starting one yourself. That will save some serious time.
Good AI to start with are: botman's source, the Ace bot AI for Quake2 (search www.botepidemic.com, and send me a mail if you cannot find it), the Eraser AI for Quake2, and the Unreal AI (documented at http://unreal.epicgames.com ).

I have some useful links on my site as well.

William
p.s. Bjarne Stroustrup is correct (pronouncing it is another problem). Do start learning and using the C++ STL as well (you're probably interested in AI, not in reinventing linked lists).

FoV normally is as simple as dotproduct from the viewing direction, and the vector to the object potentially seen. You can start doing advanced things from there.



--------------------------------------------------
09/12/00 at 09:13:48  Reply by: sun-tzu (huseyinsikici@hotmail.com)
--------------------------------------------------

Guys, what do you think on Expert System shell integration for a bot? The knowledge base would consist of all good figting techniques, every other second the environment data would be asserted causing rules to fire; with actions, causing the bot take action on them. Would this be an overkill for a bot; What is the favorite AI technique for a bot.. I hear things like decision trees, neural nets, etc, etc...

Regards,

--------------------------------------------------
09/14/00 at 08:12:07  Reply by: William (william@botepidemic.com)
--------------------------------------------------
Look for the papers by John Laird, who had a Quake2 bot built using the SOAR agent framework. They used some 700 rules, and had a bot implement prediction with nifty terrain and opponent modeling that is better than todays' bots.
However, the thing consumes 10% of a 400Mhz CPU per bot (which is about the budget that all bots together are given in a game).

I personally doubt that the approach scales up to do teamwork (though the SOAR framework has been used for that purpose in defense research).

William

